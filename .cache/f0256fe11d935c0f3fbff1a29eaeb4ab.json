{"dependencies":[{"name":"O:\\OneDrive\\Documents\\Learning\\WDS\\datepicker\\node_modules\\date-fns\\esm\\isWithinInterval\\package.json","includedInParent":true,"mtime":1635000531352},{"name":"O:\\OneDrive\\Documents\\Learning\\WDS\\datepicker\\package.json","includedInParent":true,"mtime":1635014046110},{"name":"../toDate/index.js","loc":{"line":1,"column":19},"parent":"O:\\OneDrive\\Documents\\Learning\\WDS\\datepicker\\node_modules\\date-fns\\esm\\isWithinInterval\\index.js","resolved":"O:\\OneDrive\\Documents\\Learning\\WDS\\datepicker\\node_modules\\date-fns\\esm\\toDate\\index.js"},{"name":"../_lib/requiredArgs/index.js","loc":{"line":2,"column":25},"parent":"O:\\OneDrive\\Documents\\Learning\\WDS\\datepicker\\node_modules\\date-fns\\esm\\isWithinInterval\\index.js","resolved":"O:\\OneDrive\\Documents\\Learning\\WDS\\datepicker\\node_modules\\date-fns\\esm\\_lib\\requiredArgs\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isWithinInterval;\n\nvar _index = require(\"../toDate/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require(\"../_lib/requiredArgs/index.js\");\n\nvar _index4 = _interopRequireDefault(_index3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `isWithinRange` to `isWithinInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   isWithinRange(\n *     new Date(2014, 0, 3),\n *     new Date(2014, 0, 1), new Date(2014, 0, 7)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   isWithinInterval(\n *     new Date(2014, 0, 3),\n *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date to check\n * @param {Interval} interval - the interval to check\n * @returns {Boolean} the date is within the interval\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date }) // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end }) // => true\n */\nfunction isWithinInterval(dirtyDate, interval) {\n  (0, _index4.default)(2, arguments);\n  var time = (0, _index2.default)(dirtyDate).getTime();\n  var startTime = (0, _index2.default)(interval.start).getTime();\n  var endTime = (0, _index2.default)(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  return time >= startTime && time <= endTime;\n}","map":{"mappings":[{"name":"isWithinInterval","generated":{"line":6,"column":18},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":77,"column":24}},{"generated":{"line":8,"column":0},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":2,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":4,"column":0}},{"generated":{"line":91,"column":0},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":77,"column":15}},{"name":"isWithinInterval","generated":{"line":91,"column":9},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":77,"column":24}},{"generated":{"line":91,"column":25},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":77,"column":15}},{"name":"dirtyDate","generated":{"line":91,"column":26},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":77,"column":41}},{"generated":{"line":91,"column":35},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":77,"column":15}},{"name":"interval","generated":{"line":91,"column":37},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":77,"column":52}},{"generated":{"line":91,"column":45},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":77,"column":15}},{"generated":{"line":91,"column":47},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":77,"column":62}},{"generated":{"line":92,"column":0},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":78,"column":2}},{"generated":{"line":92,"column":23},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":78,"column":15}},{"generated":{"line":92,"column":24},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":78,"column":2}},{"name":"arguments","generated":{"line":92,"column":26},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":78,"column":18}},{"generated":{"line":92,"column":35},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":78,"column":2}},{"generated":{"line":93,"column":0},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":79,"column":2}},{"name":"time","generated":{"line":93,"column":6},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":79,"column":6}},{"generated":{"line":93,"column":13},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":79,"column":13}},{"name":"dirtyDate","generated":{"line":93,"column":34},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":79,"column":20}},{"generated":{"line":93,"column":43},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":79,"column":13}},{"name":"getTime","generated":{"line":93,"column":45},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":79,"column":31}},{"generated":{"line":93,"column":52},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":79,"column":13}},{"generated":{"line":93,"column":54},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":79,"column":2}},{"generated":{"line":94,"column":0},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":80,"column":2}},{"name":"startTime","generated":{"line":94,"column":6},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":80,"column":6}},{"generated":{"line":94,"column":18},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":80,"column":18}},{"name":"interval","generated":{"line":94,"column":39},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":80,"column":25}},{"name":"start","generated":{"line":94,"column":48},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":80,"column":34}},{"generated":{"line":94,"column":53},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":80,"column":18}},{"name":"getTime","generated":{"line":94,"column":55},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":80,"column":41}},{"generated":{"line":94,"column":62},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":80,"column":18}},{"generated":{"line":94,"column":64},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":80,"column":2}},{"generated":{"line":95,"column":0},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":81,"column":2}},{"name":"endTime","generated":{"line":95,"column":6},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":81,"column":6}},{"generated":{"line":95,"column":16},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":81,"column":16}},{"name":"interval","generated":{"line":95,"column":37},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":81,"column":23}},{"name":"end","generated":{"line":95,"column":46},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":81,"column":32}},{"generated":{"line":95,"column":49},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":81,"column":16}},{"name":"getTime","generated":{"line":95,"column":51},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":81,"column":37}},{"generated":{"line":95,"column":58},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":81,"column":16}},{"generated":{"line":95,"column":60},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":81,"column":2}},{"generated":{"line":95,"column":61},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":77,"column":62}},{"generated":{"line":95,"column":62},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":81,"column":48}},{"generated":{"line":97,"column":0},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":83,"column":2}},{"generated":{"line":97,"column":6},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":83,"column":6}},{"name":"startTime","generated":{"line":97,"column":8},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":83,"column":8}},{"name":"endTime","generated":{"line":97,"column":21},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":83,"column":21}},{"generated":{"line":97,"column":28},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":83,"column":6}},{"generated":{"line":97,"column":29},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":83,"column":2}},{"generated":{"line":97,"column":31},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":83,"column":31}},{"generated":{"line":98,"column":0},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":84,"column":4}},{"generated":{"line":98,"column":10},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":84,"column":10}},{"name":"RangeError","generated":{"line":98,"column":14},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":84,"column":14}},{"generated":{"line":98,"column":24},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":84,"column":10}},{"generated":{"line":98,"column":25},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":84,"column":25}},{"generated":{"line":98,"column":43},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":84,"column":10}},{"generated":{"line":98,"column":44},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":84,"column":4}},{"generated":{"line":99,"column":0},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":85,"column":3}},{"generated":{"line":101,"column":0},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":87,"column":2}},{"name":"time","generated":{"line":101,"column":9},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":87,"column":9}},{"name":"startTime","generated":{"line":101,"column":17},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":87,"column":17}},{"generated":{"line":101,"column":26},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":87,"column":9}},{"name":"time","generated":{"line":101,"column":30},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":87,"column":30}},{"name":"endTime","generated":{"line":101,"column":38},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":87,"column":38}},{"generated":{"line":101,"column":45},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":87,"column":2}},{"generated":{"line":102,"column":0},"source":"node_modules\\date-fns\\esm\\isWithinInterval\\index.js","original":{"line":88,"column":1}}],"sources":{"node_modules\\date-fns\\esm\\isWithinInterval\\index.js":"import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `isWithinRange` to `isWithinInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   isWithinRange(\n *     new Date(2014, 0, 3),\n *     new Date(2014, 0, 1), new Date(2014, 0, 7)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   isWithinInterval(\n *     new Date(2014, 0, 3),\n *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date to check\n * @param {Interval} interval - the interval to check\n * @returns {Boolean} the date is within the interval\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date }) // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end }) // => true\n */\nexport default function isWithinInterval(dirtyDate, interval) {\n  requiredArgs(2, arguments);\n  var time = toDate(dirtyDate).getTime();\n  var startTime = toDate(interval.start).getTime();\n  var endTime = toDate(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  return time >= startTime && time <= endTime;\n}"},"lineCount":null}},"hash":"f30f0d87bdf8ac37cfb7699afd46a301","cacheData":{"env":{}},"id":158}