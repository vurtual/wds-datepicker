{"dependencies":[{"name":"O:\\OneDrive\\Documents\\Learning\\WDS\\datepicker\\node_modules\\date-fns\\esm\\isValid\\package.json","includedInParent":true,"mtime":1635000531340},{"name":"O:\\OneDrive\\Documents\\Learning\\WDS\\datepicker\\package.json","includedInParent":true,"mtime":1635014046110},{"name":"../isDate/index.js","loc":{"line":1,"column":19},"parent":"O:\\OneDrive\\Documents\\Learning\\WDS\\datepicker\\node_modules\\date-fns\\esm\\isValid\\index.js","resolved":"O:\\OneDrive\\Documents\\Learning\\WDS\\datepicker\\node_modules\\date-fns\\esm\\isDate\\index.js"},{"name":"../toDate/index.js","loc":{"line":2,"column":19},"parent":"O:\\OneDrive\\Documents\\Learning\\WDS\\datepicker\\node_modules\\date-fns\\esm\\isValid\\index.js","resolved":"O:\\OneDrive\\Documents\\Learning\\WDS\\datepicker\\node_modules\\date-fns\\esm\\toDate\\index.js"},{"name":"../_lib/requiredArgs/index.js","loc":{"line":3,"column":25},"parent":"O:\\OneDrive\\Documents\\Learning\\WDS\\datepicker\\node_modules\\date-fns\\esm\\isValid\\index.js","resolved":"O:\\OneDrive\\Documents\\Learning\\WDS\\datepicker\\node_modules\\date-fns\\esm\\_lib\\requiredArgs\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isValid;\n\nvar _index = require(\"../isDate/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require(\"../toDate/index.js\");\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _index5 = require(\"../_lib/requiredArgs/index.js\");\n\nvar _index6 = _interopRequireDefault(_index5);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nfunction isValid(dirtyDate) {\n  (0, _index6.default)(1, arguments);\n\n  if (!(0, _index2.default)(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = (0, _index4.default)(dirtyDate);\n  return !isNaN(Number(date));\n}","map":{"mappings":[{"name":"isValid","generated":{"line":6,"column":18},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":62,"column":24}},{"generated":{"line":8,"column":0},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":2,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":3,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":4,"column":0}},{"generated":{"line":80,"column":0},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":62,"column":15}},{"name":"isValid","generated":{"line":80,"column":9},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":62,"column":24}},{"generated":{"line":80,"column":16},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":62,"column":15}},{"name":"dirtyDate","generated":{"line":80,"column":17},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":62,"column":32}},{"generated":{"line":80,"column":26},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":62,"column":15}},{"generated":{"line":80,"column":28},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":62,"column":43}},{"generated":{"line":81,"column":0},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":63,"column":2}},{"generated":{"line":81,"column":23},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":63,"column":15}},{"generated":{"line":81,"column":24},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":63,"column":2}},{"name":"arguments","generated":{"line":81,"column":26},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":63,"column":18}},{"generated":{"line":81,"column":35},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":63,"column":2}},{"generated":{"line":83,"column":0},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":65,"column":2}},{"generated":{"line":83,"column":6},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":65,"column":6}},{"generated":{"line":83,"column":7},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":65,"column":7}},{"name":"dirtyDate","generated":{"line":83,"column":28},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":65,"column":14}},{"generated":{"line":83,"column":37},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":65,"column":7}},{"generated":{"line":83,"column":38},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":65,"column":6}},{"generated":{"line":83,"column":42},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":65,"column":28}},{"name":"dirtyDate","generated":{"line":83,"column":49},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":65,"column":35}},{"generated":{"line":83,"column":58},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":65,"column":28}},{"generated":{"line":83,"column":63},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":65,"column":49}},{"generated":{"line":83,"column":71},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":65,"column":2}},{"generated":{"line":83,"column":73},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":65,"column":59}},{"generated":{"line":84,"column":0},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":66,"column":4}},{"generated":{"line":84,"column":11},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":66,"column":11}},{"generated":{"line":84,"column":16},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":66,"column":4}},{"generated":{"line":85,"column":0},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":67,"column":3}},{"generated":{"line":87,"column":0},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":69,"column":2}},{"name":"date","generated":{"line":87,"column":6},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":69,"column":6}},{"generated":{"line":87,"column":13},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":69,"column":13}},{"name":"dirtyDate","generated":{"line":87,"column":34},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":69,"column":20}},{"generated":{"line":87,"column":43},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":69,"column":13}},{"generated":{"line":87,"column":44},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":69,"column":2}},{"generated":{"line":88,"column":0},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":70,"column":2}},{"generated":{"line":88,"column":9},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":70,"column":9}},{"name":"isNaN","generated":{"line":88,"column":10},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":70,"column":10}},{"name":"Number","generated":{"line":88,"column":16},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":70,"column":16}},{"name":"date","generated":{"line":88,"column":23},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":70,"column":23}},{"generated":{"line":88,"column":27},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":70,"column":16}},{"generated":{"line":88,"column":28},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":70,"column":10}},{"generated":{"line":88,"column":29},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":70,"column":2}},{"generated":{"line":89,"column":0},"source":"node_modules\\date-fns\\esm\\isValid\\index.js","original":{"line":71,"column":1}}],"sources":{"node_modules\\date-fns\\esm\\isValid\\index.js":"import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}"},"lineCount":null}},"hash":"81ffd2abe2eb8e5baf908597153d8dab","cacheData":{"env":{}},"id":155}