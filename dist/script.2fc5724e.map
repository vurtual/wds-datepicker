{"version":3,"sources":["node_modules\\date-fns\\esm\\_lib\\toInteger\\index.js","node_modules\\date-fns\\esm\\_lib\\requiredArgs\\index.js","node_modules\\date-fns\\esm\\toDate\\index.js","node_modules\\date-fns\\esm\\addDays\\index.js","node_modules\\date-fns\\esm\\addMonths\\index.js","node_modules\\date-fns\\esm\\add\\index.js","node_modules\\date-fns\\esm\\isWeekend\\index.js","node_modules\\date-fns\\esm\\isSunday\\index.js","node_modules\\date-fns\\esm\\isSaturday\\index.js","node_modules\\date-fns\\esm\\addBusinessDays\\index.js","node_modules\\date-fns\\esm\\addMilliseconds\\index.js","node_modules\\date-fns\\esm\\addHours\\index.js","node_modules\\date-fns\\esm\\startOfWeek\\index.js","node_modules\\date-fns\\esm\\startOfISOWeek\\index.js","node_modules\\date-fns\\esm\\getISOWeekYear\\index.js","node_modules\\date-fns\\esm\\startOfISOWeekYear\\index.js","node_modules\\date-fns\\esm\\_lib\\getTimezoneOffsetInMilliseconds\\index.js","node_modules\\date-fns\\esm\\startOfDay\\index.js","node_modules\\date-fns\\esm\\differenceInCalendarDays\\index.js","node_modules\\date-fns\\esm\\setISOWeekYear\\index.js","node_modules\\date-fns\\esm\\addISOWeekYears\\index.js","node_modules\\date-fns\\esm\\addMinutes\\index.js","node_modules\\date-fns\\esm\\addQuarters\\index.js","node_modules\\date-fns\\esm\\addSeconds\\index.js","node_modules\\date-fns\\esm\\addWeeks\\index.js","node_modules\\date-fns\\esm\\addYears\\index.js","node_modules\\date-fns\\esm\\areIntervalsOverlapping\\index.js","node_modules\\date-fns\\esm\\max\\index.js","node_modules\\date-fns\\esm\\min\\index.js","node_modules\\date-fns\\esm\\clamp\\index.js","node_modules\\date-fns\\esm\\closestIndexTo\\index.js","node_modules\\date-fns\\esm\\closestTo\\index.js","node_modules\\date-fns\\esm\\compareAsc\\index.js","node_modules\\date-fns\\esm\\compareDesc\\index.js","node_modules\\date-fns\\esm\\constants\\index.js","node_modules\\date-fns\\esm\\daysToWeeks\\index.js","node_modules\\date-fns\\esm\\isDate\\index.js","node_modules\\date-fns\\esm\\isValid\\index.js","node_modules\\date-fns\\esm\\isSameDay\\index.js","node_modules\\date-fns\\esm\\differenceInBusinessDays\\index.js","node_modules\\date-fns\\esm\\differenceInCalendarISOWeekYears\\index.js","node_modules\\date-fns\\esm\\differenceInCalendarISOWeeks\\index.js","node_modules\\date-fns\\esm\\differenceInCalendarMonths\\index.js","node_modules\\date-fns\\esm\\getQuarter\\index.js","node_modules\\date-fns\\esm\\differenceInCalendarQuarters\\index.js","node_modules\\date-fns\\esm\\differenceInCalendarWeeks\\index.js","node_modules\\date-fns\\esm\\differenceInCalendarYears\\index.js","node_modules\\date-fns\\esm\\differenceInDays\\index.js","node_modules\\date-fns\\esm\\differenceInMilliseconds\\index.js","node_modules\\date-fns\\esm\\_lib\\roundingMethods\\index.js","node_modules\\date-fns\\esm\\differenceInHours\\index.js","node_modules\\date-fns\\esm\\subISOWeekYears\\index.js","node_modules\\date-fns\\esm\\differenceInISOWeekYears\\index.js","node_modules\\date-fns\\esm\\differenceInMinutes\\index.js","node_modules\\date-fns\\esm\\endOfDay\\index.js","node_modules\\date-fns\\esm\\endOfMonth\\index.js","node_modules\\date-fns\\esm\\isLastDayOfMonth\\index.js","node_modules\\date-fns\\esm\\differenceInMonths\\index.js","node_modules\\date-fns\\esm\\differenceInQuarters\\index.js","node_modules\\date-fns\\esm\\differenceInSeconds\\index.js","node_modules\\date-fns\\esm\\differenceInWeeks\\index.js","node_modules\\date-fns\\esm\\differenceInYears\\index.js","node_modules\\date-fns\\esm\\eachDayOfInterval\\index.js","node_modules\\date-fns\\esm\\eachHourOfInterval\\index.js","node_modules\\date-fns\\esm\\startOfMinute\\index.js","node_modules\\date-fns\\esm\\eachMinuteOfInterval\\index.js","node_modules\\date-fns\\esm\\eachMonthOfInterval\\index.js","node_modules\\date-fns\\esm\\startOfQuarter\\index.js","node_modules\\date-fns\\esm\\eachQuarterOfInterval\\index.js","node_modules\\date-fns\\esm\\eachWeekOfInterval\\index.js","node_modules\\date-fns\\esm\\eachWeekendOfInterval\\index.js","node_modules\\date-fns\\esm\\startOfMonth\\index.js","node_modules\\date-fns\\esm\\eachWeekendOfMonth\\index.js","node_modules\\date-fns\\esm\\startOfYear\\index.js","node_modules\\date-fns\\esm\\endOfYear\\index.js","node_modules\\date-fns\\esm\\eachWeekendOfYear\\index.js","node_modules\\date-fns\\esm\\eachYearOfInterval\\index.js","node_modules\\date-fns\\esm\\endOfDecade\\index.js","node_modules\\date-fns\\esm\\endOfHour\\index.js","node_modules\\date-fns\\esm\\endOfWeek\\index.js","node_modules\\date-fns\\esm\\endOfISOWeek\\index.js","node_modules\\date-fns\\esm\\endOfISOWeekYear\\index.js","node_modules\\date-fns\\esm\\endOfMinute\\index.js","node_modules\\date-fns\\esm\\endOfQuarter\\index.js","node_modules\\date-fns\\esm\\endOfSecond\\index.js","node_modules\\date-fns\\esm\\endOfToday\\index.js","node_modules\\date-fns\\esm\\endOfTomorrow\\index.js","node_modules\\date-fns\\esm\\endOfYesterday\\index.js","node_modules\\date-fns\\esm\\locale\\en-US\\_lib\\formatDistance\\index.js","node_modules\\date-fns\\esm\\locale\\_lib\\buildFormatLongFn\\index.js","node_modules\\date-fns\\esm\\locale\\en-US\\_lib\\formatLong\\index.js","node_modules\\date-fns\\esm\\locale\\en-US\\_lib\\formatRelative\\index.js","node_modules\\date-fns\\esm\\locale\\_lib\\buildLocalizeFn\\index.js","node_modules\\date-fns\\esm\\locale\\en-US\\_lib\\localize\\index.js","node_modules\\date-fns\\esm\\locale\\_lib\\buildMatchFn\\index.js","node_modules\\date-fns\\esm\\locale\\_lib\\buildMatchPatternFn\\index.js","node_modules\\date-fns\\esm\\locale\\en-US\\_lib\\match\\index.js","node_modules\\date-fns\\esm\\locale\\en-US\\index.js","node_modules\\date-fns\\esm\\subMilliseconds\\index.js","node_modules\\date-fns\\esm\\_lib\\addLeadingZeros\\index.js","node_modules\\date-fns\\esm\\_lib\\format\\lightFormatters\\index.js","node_modules\\date-fns\\esm\\_lib\\getUTCDayOfYear\\index.js","node_modules\\date-fns\\esm\\_lib\\startOfUTCISOWeek\\index.js","node_modules\\date-fns\\esm\\_lib\\getUTCISOWeekYear\\index.js","node_modules\\date-fns\\esm\\_lib\\startOfUTCISOWeekYear\\index.js","node_modules\\date-fns\\esm\\_lib\\getUTCISOWeek\\index.js","node_modules\\date-fns\\esm\\_lib\\startOfUTCWeek\\index.js","node_modules\\date-fns\\esm\\_lib\\getUTCWeekYear\\index.js","node_modules\\date-fns\\esm\\_lib\\startOfUTCWeekYear\\index.js","node_modules\\date-fns\\esm\\_lib\\getUTCWeek\\index.js","node_modules\\date-fns\\esm\\_lib\\format\\formatters\\index.js","node_modules\\date-fns\\esm\\_lib\\format\\longFormatters\\index.js","node_modules\\date-fns\\esm\\_lib\\protectedTokens\\index.js","node_modules\\date-fns\\esm\\format\\index.js","node_modules\\date-fns\\esm\\_lib\\assign\\index.js","node_modules\\date-fns\\esm\\_lib\\cloneObject\\index.js","node_modules\\date-fns\\esm\\formatDistance\\index.js","node_modules\\date-fns\\esm\\formatDistanceStrict\\index.js","node_modules\\date-fns\\esm\\formatDistanceToNow\\index.js","node_modules\\date-fns\\esm\\formatDistanceToNowStrict\\index.js","node_modules\\date-fns\\esm\\formatDuration\\index.js","node_modules\\date-fns\\esm\\formatISO\\index.js","node_modules\\date-fns\\esm\\formatISO9075\\index.js","node_modules\\date-fns\\esm\\formatISODuration\\index.js","node_modules\\date-fns\\esm\\formatRFC3339\\index.js","node_modules\\date-fns\\esm\\formatRFC7231\\index.js","node_modules\\date-fns\\esm\\formatRelative\\index.js","node_modules\\date-fns\\esm\\fromUnixTime\\index.js","node_modules\\date-fns\\esm\\getDate\\index.js","node_modules\\date-fns\\esm\\getDay\\index.js","node_modules\\date-fns\\esm\\getDayOfYear\\index.js","node_modules\\date-fns\\esm\\getDaysInMonth\\index.js","node_modules\\date-fns\\esm\\isLeapYear\\index.js","node_modules\\date-fns\\esm\\getDaysInYear\\index.js","node_modules\\date-fns\\esm\\getDecade\\index.js","node_modules\\date-fns\\esm\\getHours\\index.js","node_modules\\date-fns\\esm\\getISODay\\index.js","node_modules\\date-fns\\esm\\getISOWeek\\index.js","node_modules\\date-fns\\esm\\getISOWeeksInYear\\index.js","node_modules\\date-fns\\esm\\getMilliseconds\\index.js","node_modules\\date-fns\\esm\\getMinutes\\index.js","node_modules\\date-fns\\esm\\getMonth\\index.js","node_modules\\date-fns\\esm\\getOverlappingDaysInIntervals\\index.js","node_modules\\date-fns\\esm\\getSeconds\\index.js","node_modules\\date-fns\\esm\\getTime\\index.js","node_modules\\date-fns\\esm\\getUnixTime\\index.js","node_modules\\date-fns\\esm\\getWeekYear\\index.js","node_modules\\date-fns\\esm\\startOfWeekYear\\index.js","node_modules\\date-fns\\esm\\getWeek\\index.js","node_modules\\date-fns\\esm\\getWeekOfMonth\\index.js","node_modules\\date-fns\\esm\\lastDayOfMonth\\index.js","node_modules\\date-fns\\esm\\getWeeksInMonth\\index.js","node_modules\\date-fns\\esm\\getYear\\index.js","node_modules\\date-fns\\esm\\hoursToMilliseconds\\index.js","node_modules\\date-fns\\esm\\hoursToMinutes\\index.js","node_modules\\date-fns\\esm\\hoursToSeconds\\index.js","node_modules\\date-fns\\esm\\subDays\\index.js","node_modules\\date-fns\\esm\\subMonths\\index.js","node_modules\\date-fns\\esm\\sub\\index.js","node_modules\\date-fns\\esm\\intervalToDuration\\index.js","node_modules\\date-fns\\esm\\intlFormat\\index.js","node_modules\\date-fns\\esm\\isAfter\\index.js","node_modules\\date-fns\\esm\\isBefore\\index.js","node_modules\\date-fns\\esm\\isEqual\\index.js","node_modules\\date-fns\\esm\\isExists\\index.js","node_modules\\date-fns\\esm\\isFirstDayOfMonth\\index.js","node_modules\\date-fns\\esm\\isFriday\\index.js","node_modules\\date-fns\\esm\\isFuture\\index.js","node_modules\\date-fns\\esm\\_lib\\setUTCDay\\index.js","node_modules\\date-fns\\esm\\_lib\\setUTCISODay\\index.js","node_modules\\date-fns\\esm\\_lib\\setUTCISOWeek\\index.js","node_modules\\date-fns\\esm\\_lib\\setUTCWeek\\index.js","node_modules\\date-fns\\esm\\parse\\_lib\\parsers\\index.js","node_modules\\date-fns\\esm\\parse\\index.js","node_modules\\date-fns\\esm\\isMatch\\index.js","node_modules\\date-fns\\esm\\isMonday\\index.js","node_modules\\date-fns\\esm\\isPast\\index.js","node_modules\\date-fns\\esm\\startOfHour\\index.js","node_modules\\date-fns\\esm\\isSameHour\\index.js","node_modules\\date-fns\\esm\\isSameWeek\\index.js","node_modules\\date-fns\\esm\\isSameISOWeek\\index.js","node_modules\\date-fns\\esm\\isSameISOWeekYear\\index.js","node_modules\\date-fns\\esm\\isSameMinute\\index.js","node_modules\\date-fns\\esm\\isSameMonth\\index.js","node_modules\\date-fns\\esm\\isSameQuarter\\index.js","node_modules\\date-fns\\esm\\startOfSecond\\index.js","node_modules\\date-fns\\esm\\isSameSecond\\index.js","node_modules\\date-fns\\esm\\isSameYear\\index.js","node_modules\\date-fns\\esm\\isThisHour\\index.js","node_modules\\date-fns\\esm\\isThisISOWeek\\index.js","node_modules\\date-fns\\esm\\isThisMinute\\index.js","node_modules\\date-fns\\esm\\isThisMonth\\index.js","node_modules\\date-fns\\esm\\isThisQuarter\\index.js","node_modules\\date-fns\\esm\\isThisSecond\\index.js","node_modules\\date-fns\\esm\\isThisWeek\\index.js","node_modules\\date-fns\\esm\\isThisYear\\index.js","node_modules\\date-fns\\esm\\isThursday\\index.js","node_modules\\date-fns\\esm\\isToday\\index.js","node_modules\\date-fns\\esm\\isTomorrow\\index.js","node_modules\\date-fns\\esm\\isTuesday\\index.js","node_modules\\date-fns\\esm\\isWednesday\\index.js","node_modules\\date-fns\\esm\\isWithinInterval\\index.js","node_modules\\date-fns\\esm\\isYesterday\\index.js","node_modules\\date-fns\\esm\\lastDayOfDecade\\index.js","node_modules\\date-fns\\esm\\lastDayOfWeek\\index.js","node_modules\\date-fns\\esm\\lastDayOfISOWeek\\index.js","node_modules\\date-fns\\esm\\lastDayOfISOWeekYear\\index.js","node_modules\\date-fns\\esm\\lastDayOfQuarter\\index.js","node_modules\\date-fns\\esm\\lastDayOfYear\\index.js","node_modules\\date-fns\\esm\\lightFormat\\index.js","node_modules\\date-fns\\esm\\milliseconds\\index.js","node_modules\\date-fns\\esm\\millisecondsToHours\\index.js","node_modules\\date-fns\\esm\\millisecondsToMinutes\\index.js","node_modules\\date-fns\\esm\\millisecondsToSeconds\\index.js","node_modules\\date-fns\\esm\\minutesToHours\\index.js","node_modules\\date-fns\\esm\\minutesToMilliseconds\\index.js","node_modules\\date-fns\\esm\\minutesToSeconds\\index.js","node_modules\\date-fns\\esm\\monthsToQuarters\\index.js","node_modules\\date-fns\\esm\\monthsToYears\\index.js","node_modules\\date-fns\\esm\\nextDay\\index.js","node_modules\\date-fns\\esm\\nextFriday\\index.js","node_modules\\date-fns\\esm\\nextMonday\\index.js","node_modules\\date-fns\\esm\\nextSaturday\\index.js","node_modules\\date-fns\\esm\\nextSunday\\index.js","node_modules\\date-fns\\esm\\nextThursday\\index.js","node_modules\\date-fns\\esm\\nextTuesday\\index.js","node_modules\\date-fns\\esm\\nextWednesday\\index.js","node_modules\\date-fns\\esm\\parseISO\\index.js","node_modules\\date-fns\\esm\\parseJSON\\index.js","node_modules\\date-fns\\esm\\previousDay\\index.js","node_modules\\date-fns\\esm\\previousFriday\\index.js","node_modules\\date-fns\\esm\\previousMonday\\index.js","node_modules\\date-fns\\esm\\previousSaturday\\index.js","node_modules\\date-fns\\esm\\previousSunday\\index.js","node_modules\\date-fns\\esm\\previousThursday\\index.js","node_modules\\date-fns\\esm\\previousTuesday\\index.js","node_modules\\date-fns\\esm\\previousWednesday\\index.js","node_modules\\date-fns\\esm\\quartersToMonths\\index.js","node_modules\\date-fns\\esm\\quartersToYears\\index.js","node_modules\\date-fns\\esm\\roundToNearestMinutes\\index.js","node_modules\\date-fns\\esm\\secondsToHours\\index.js","node_modules\\date-fns\\esm\\secondsToMilliseconds\\index.js","node_modules\\date-fns\\esm\\secondsToMinutes\\index.js","node_modules\\date-fns\\esm\\setMonth\\index.js","node_modules\\date-fns\\esm\\set\\index.js","node_modules\\date-fns\\esm\\setDate\\index.js","node_modules\\date-fns\\esm\\setDay\\index.js","node_modules\\date-fns\\esm\\setDayOfYear\\index.js","node_modules\\date-fns\\esm\\setHours\\index.js","node_modules\\date-fns\\esm\\setISODay\\index.js","node_modules\\date-fns\\esm\\setISOWeek\\index.js","node_modules\\date-fns\\esm\\setMilliseconds\\index.js","node_modules\\date-fns\\esm\\setMinutes\\index.js","node_modules\\date-fns\\esm\\setQuarter\\index.js","node_modules\\date-fns\\esm\\setSeconds\\index.js","node_modules\\date-fns\\esm\\setWeek\\index.js","node_modules\\date-fns\\esm\\setWeekYear\\index.js","node_modules\\date-fns\\esm\\setYear\\index.js","node_modules\\date-fns\\esm\\startOfDecade\\index.js","node_modules\\date-fns\\esm\\startOfToday\\index.js","node_modules\\date-fns\\esm\\startOfTomorrow\\index.js","node_modules\\date-fns\\esm\\startOfYesterday\\index.js","node_modules\\date-fns\\esm\\subBusinessDays\\index.js","node_modules\\date-fns\\esm\\subHours\\index.js","node_modules\\date-fns\\esm\\subMinutes\\index.js","node_modules\\date-fns\\esm\\subQuarters\\index.js","node_modules\\date-fns\\esm\\subSeconds\\index.js","node_modules\\date-fns\\esm\\subWeeks\\index.js","node_modules\\date-fns\\esm\\subYears\\index.js","node_modules\\date-fns\\esm\\weeksToDays\\index.js","node_modules\\date-fns\\esm\\yearsToMonths\\index.js","node_modules\\date-fns\\esm\\yearsToQuarters\\index.js","node_modules\\date-fns\\esm\\index.js","script.js"],"names":["toInteger","dirtyNumber","NaN","number","Number","isNaN","Math","ceil","floor","requiredArgs","required","args","length","TypeError","toDate","argument","arguments","argStr","Object","prototype","toString","call","Date","getTime","console","warn","Error","stack","addDays","dirtyDate","dirtyAmount","date","amount","setDate","getDate","addMonths","dayOfMonth","endOfDesiredMonth","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","add","duration","years","months","weeks","days","hours","minutes","seconds","dateWithMonths","dateWithDays","minutesToAdd","secondsToAdd","msToAdd","finalDate","isWeekend","day","getDay","isSunday","isSaturday","addBusinessDays","startedOnWeekend","getHours","sign","fullWeeks","restDays","abs","setHours","addMilliseconds","timestamp","addHours","MILLISECONDS_IN_HOUR","startOfWeek","dirtyOptions","options","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","RangeError","diff","startOfISOWeek","getISOWeekYear","year","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","startOfISOWeekYear","fourthOfJanuary","getTimezoneOffsetInMilliseconds","utcDate","UTC","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","startOfDay","differenceInCalendarDays","MILLISECONDS_IN_DAY","dirtyDateLeft","dirtyDateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","round","setISOWeekYear","dirtyISOWeekYear","isoWeekYear","addISOWeekYears","addMinutes","MILLISECONDS_IN_MINUTE","addQuarters","addSeconds","addWeeks","addYears","areIntervalsOverlapping","dirtyIntervalLeft","dirtyIntervalRight","undefined","inclusive","intervalLeft","intervalRight","leftStartTime","start","leftEndTime","end","rightStartTime","rightEndTime","max","dirtyDatesArray","datesArray","forEach","Array","slice","result","currentDate","min","clamp","_ref","closestIndexTo","dirtyDateToCompare","dateToCompare","timeToCompare","minDistance","index","distance","closestTo","compareAsc","dateLeft","dateRight","compareDesc","daysInWeek","maxTime","pow","millisecondsInMinute","millisecondsInHour","millisecondsInSecond","minTime","minutesInHour","monthsInQuarter","monthsInYear","quartersInYear","secondsInHour","secondsInMinute","daysToWeeks","isDate","value","isValid","isSameDay","dateLeftStartOfDay","dateRightStartOfDay","differenceInBusinessDays","calendarDifference","differenceInCalendarISOWeekYears","differenceInCalendarISOWeeks","MILLISECONDS_IN_WEEK","startOfISOWeekLeft","startOfISOWeekRight","differenceInCalendarMonths","yearDiff","monthDiff","getQuarter","quarter","differenceInCalendarQuarters","quarterDiff","differenceInCalendarWeeks","startOfWeekLeft","startOfWeekRight","differenceInCalendarYears","differenceInDays","compareLocalAsc","difference","isLastDayNotFull","differenceInMilliseconds","getRoundingMethod","roundingMap","trunc","defaultRoundingMethod","method","differenceInHours","roundingMethod","subISOWeekYears","differenceInISOWeekYears","isLastISOWeekYearNotFull","differenceInMinutes","endOfDay","endOfMonth","month","isLastDayOfMonth","differenceInMonths","isLastMonthNotFull","differenceInQuarters","differenceInSeconds","differenceInWeeks","differenceInYears","isLastYearNotFull","eachDayOfInterval","dirtyInterval","interval","startDate","endDate","endTime","dates","step","push","eachHourOfInterval","startTime","setMinutes","startOfMinute","setSeconds","eachMinuteOfInterval","eachMonthOfInterval","startOfQuarter","currentMonth","eachQuarterOfInterval","startDateQuarter","endDateQuarter","quarters","currentQuarter","eachWeekOfInterval","startDateWeek","endDateWeek","currentWeek","eachWeekendOfInterval","dateInterval","weekends","startOfMonth","eachWeekendOfMonth","startOfYear","cleanDate","endOfYear","eachWeekendOfYear","eachYearOfInterval","endOfDecade","decade","endOfHour","endOfWeek","endOfISOWeek","endOfISOWeekYear","setMilliseconds","endOfMinute","endOfQuarter","endOfSecond","endOfToday","now","endOfTomorrow","endOfYesterday","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","formatDistance","token","count","tokenValue","replace","addSuffix","comparison","buildFormatLongFn","width","String","defaultWidth","format","formats","dateFormats","full","long","medium","short","timeFormats","dateTimeFormats","formatLong","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","formatRelative","_date","_baseDate","_options","buildLocalizeFn","dirtyIndex","context","valuesArray","formattingValues","defaultFormattingWidth","_defaultWidth","_width","values","argumentCallback","eraValues","narrow","abbreviated","wide","quarterValues","monthValues","dayValues","dayPeriodValues","am","pm","midnight","noon","morning","afternoon","evening","night","formattingDayPeriodValues","ordinalNumber","rem100","localize","era","dayPeriod","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","key","isArray","findIndex","pattern","test","findKey","valueCallback","rest","object","predicate","hasOwnProperty","array","buildMatchPatternFn","parseResult","parsePattern","matchOrdinalNumberPattern","parseOrdinalNumberPattern","matchEraPatterns","parseEraPatterns","any","matchQuarterPatterns","parseQuarterPatterns","matchMonthPatterns","parseMonthPatterns","matchDayPatterns","parseDayPatterns","matchDayPeriodPatterns","parseDayPeriodPatterns","parseInt","code","firstWeekContainsDate","subMilliseconds","addLeadingZeros","targetLength","output","formatters","y","signedYear","getUTCFullYear","M","getUTCMonth","d","getUTCDate","a","dayPeriodEnumValue","getUTCHours","toUpperCase","h","H","m","getUTCMinutes","s","getUTCSeconds","S","numberOfDigits","milliseconds","getUTCMilliseconds","fractionalSeconds","getUTCDayOfYear","setUTCMonth","setUTCHours","startOfYearTimestamp","startOfUTCISOWeek","getUTCDay","setUTCDate","getUTCISOWeekYear","startOfUTCISOWeekYear","getUTCISOWeek","startOfUTCWeek","getUTCWeekYear","localeFirstWeekContainsDate","defaultFirstWeekContainsDate","firstWeekOfNextYear","firstWeekOfThisYear","startOfUTCWeekYear","firstWeek","getUTCWeek","dayPeriodEnum","G","unit","lightFormatters","Y","signedWeekYear","weekYear","twoDigitYear","R","u","Q","q","L","w","week","I","isoWeek","D","dayOfYear","E","dayOfWeek","e","localDayOfWeek","c","i","isoDayOfWeek","toLowerCase","b","B","K","k","X","_localize","originalDate","_originalDate","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","T","offset","dirtyDelimiter","absOffset","delimiter","dateLongFormatter","timeLongFormatter","dateTimeLongFormatter","datePattern","timePattern","dateTimeFormat","longFormatters","p","P","isProtectedDayOfYearToken","isProtectedWeekYearToken","throwProtectedError","protectedDayOfYearTokens","protectedWeekYearTokens","indexOf","input","concat","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","dirtyFormatStr","formatStr","defaultLocale","formatterOptions","map","substring","firstCharacter","longFormatter","join","cleanEscapedString","formatter","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","assign","target","dirtyObject","property","cloneObject","MINUTES_IN_DAY","MINUTES_IN_ALMOST_TWO_DAYS","MINUTES_IN_MONTH","MINUTES_IN_TWO_MONTHS","dirtyBaseDate","localizeOptions","Boolean","offsetInSeconds","includeSeconds","nearestMonth","monthsSinceStartOfYear","formatDistanceStrict","MINUTES_IN_YEAR","roundingMethodFn","dstNormalizedMinutes","roundedMinutes","formatDistanceToNow","formatDistanceToNowStrict","formatDuration","defaultFormat","zero","reduce","acc","addChunk","formatISO","representation","tzOffset","dateDelimiter","timeDelimiter","absoluteOffset","hourOffset","minuteOffset","hour","minute","second","separator","formatISO9075","formatISODuration","_duration$years","_duration$months","_duration$days","_duration$hours","_duration$minutes","_duration$seconds","formatRFC3339","_ref$fractionDigits","fractionDigits","fractionalSecond","formatRFC7231","dayName","monthName","baseDate","_ref$locale","_ref$weekStartsOn","utcBaseDate","fromUnixTime","dirtyUnixTime","unixTime","getDayOfYear","getDaysInMonth","monthIndex","lastDayOfMonth","isLeapYear","getDaysInYear","getDecade","getISODay","getISOWeek","getISOWeeksInYear","thisYear","nextYear","valueOf","getOverlappingDaysInIntervals","isOverlapping","overlapStartDate","overlapEndDate","differenceInMs","getUnixTime","getWeekYear","_options$locale","_options$locale$optio","startOfWeekYear","getWeek","getWeekOfMonth","currentDayOfMonth","startWeekDay","lastDayOfFirstWeek","weekNumber","remainingDaysAfterFirstWeek","getWeeksInMonth","getYear","hoursToMilliseconds","hoursToMinutes","hoursToSeconds","subDays","subMonths","sub","dateWithoutMonths","dateWithoutDays","minutestoSub","secondstoSub","mstoSub","intervalToDuration","remainingMonths","remainingDays","remainingHours","remainingMinutes","remainingSeconds","intlFormat","formatOrLocale","localeOptions","_localeOptions","formatOptions","isFormatOptions","Intl","DateTimeFormat","opts","isAfter","isBefore","isEqual","dirtyLeftDate","dirtyRightDate","isExists","isFirstDayOfMonth","isFriday","isFuture","setUTCDay","dirtyDay","currentDay","remainder","dayIndex","setUTCISODay","setUTCISOWeek","dirtyISOWeek","setUTCWeek","dirtyWeek","MILLISECONDS_IN_SECOND","numericPatterns","hour23h","hour24h","hour11h","hour12h","singleDigit","twoDigits","threeDigits","fourDigits","anyDigitsSigned","singleDigitSigned","twoDigitsSigned","threeDigitsSigned","fourDigitsSigned","timezonePatterns","basicOptionalMinutes","basic","basicOptionalSeconds","extended","extendedOptionalSeconds","parseNumericPattern","parseTimezonePattern","parseAnyDigitsSigned","parseNDigits","n","RegExp","parseNDigitsSigned","dayPeriodEnumToHours","enumValue","normalizeTwoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","rangeEndCentury","isPreviousCentury","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","isLeapYearIndex","parsers","priority","parse","set","flags","incompatibleTokens","isTwoDigitYear","validate","normalizedTwoDigitYear","_match","_flags","firstWeekOfYear","subPriority","wholeWeekDays","isPM","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","timestampIsSet","_token","TIMEZONE_UNIT_PRIORITY","notWhitespaceRegExp","dirtyDateString","dirtyFormatString","dirtyReferenceDate","dateString","formatString","subFnOptions","setters","dateToSystemTimezone","tokens","usedTokens","parser","incompatibleToken","_i","usedToken","fullToken","uniquePrioritySetters","setter","sort","filter","setterArray","convertedDate","isMatch","isMonday","isPast","startOfHour","isSameHour","dateLeftStartOfHour","dateRightStartOfHour","isSameWeek","dateLeftStartOfWeek","dateRightStartOfWeek","isSameISOWeek","isSameISOWeekYear","dateLeftStartOfYear","dateRightStartOfYear","isSameMinute","dateLeftStartOfMinute","dateRightStartOfMinute","isSameMonth","isSameQuarter","dateLeftStartOfQuarter","dateRightStartOfQuarter","startOfSecond","isSameSecond","dateLeftStartOfSecond","dateRightStartOfSecond","isSameYear","isThisHour","isThisISOWeek","isThisMinute","isThisMonth","isThisQuarter","isThisSecond","isThisWeek","isThisYear","isThursday","isToday","isTomorrow","isTuesday","isWednesday","isWithinInterval","isYesterday","lastDayOfDecade","lastDayOfWeek","lastDayOfISOWeek","lastDayOfISOWeekYear","lastDayOfQuarter","lastDayOfYear","lightFormat","matches","daysInYear","totalDays","totalSeconds","millisecondsToHours","millisecondsToMinutes","millisecondsToSeconds","minutesToHours","minutesToMilliseconds","minutesToSeconds","monthsToQuarters","monthsToYears","nextDay","delta","nextFriday","nextMonday","nextSaturday","nextSunday","nextThursday","nextTuesday","nextWednesday","parseISO","DEFAULT_ADDITIONAL_DIGITS","patterns","dateTimeDelimiter","timeZoneDelimiter","timezone","dateRegex","timeRegex","timezoneRegex","additionalDigits","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","restDateString","parseTime","parseTimezone","split","timeString","substr","exec","regex","captures","century","isWeekDate","parseDateUnit","validateWeekDate","dayOfISOWeekYear","validateDate","validateDayOfYearDate","parseTimeUnit","validateTime","parseFloat","timezoneString","validateTimezone","fourthOfJanuaryDay","daysInMonths","_year","_hours","parseJSON","parts","previousDay","previousFriday","previousMonday","previousSaturday","previousSunday","previousThursday","previousTuesday","previousWednesday","quartersToMonths","quartersToYears","roundToNearestMinutes","nearestTo","remainderMinutes","addedMinutes","secondsToHours","secondsToMilliseconds","secondsToMinutes","dirtyMonth","dateWithDesiredMonth","dirtyDayOfMonth","setDay","setDayOfYear","dirtyDayOfYear","dirtyHours","setISODay","setISOWeek","dirtyMilliseconds","dirtyMinutes","setQuarter","dirtyQuarter","oldQuarter","dirtySeconds","setWeek","setWeekYear","dirtyWeekYear","setYear","dirtyYear","startOfDecade","startOfToday","startOfTomorrow","startOfYesterday","subBusinessDays","subHours","subMinutes","subQuarters","subSeconds","subWeeks","subYears","weeksToDays","yearsToMonths","yearsToQuarters","default","button","document","querySelector","datepicker","grid","weekdays","datePickerViewDate","selectedDate","updateDOM","addEventListener","classList","toggle","changeMonth","changeYear","selected","remove","dateArray","dataset","setDateFromArray","updateButtonText","updateDatePicker","setDateEqual","sourceDate","targetDate","source","advance","formatDateString","formatCurrentMonth","updateCurrentMonth","innerText","getDateFrom","dt","getDaysFromPreviousMonth","getFirstWeekdayOfCurrentMonth","getFirstOfCurrentMonth","daysFromPreviousMonth","unshift","getDaysFromCurrentMonth","daysFromMonth","getDaysFromNextMonth","daysFromNextMonth","clearDatePicker","children","insertDateButtons","isCurrentMonth","dateButton","createElement","append","updateCurrentDays","daysFromCurrentMonth"],"mappings":"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":"script.2fc5724e.map","sourceRoot":"..","sourcesContent":["export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import addDays from \"../addDays/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * | Key            | Description                        |\n * |----------------|------------------------------------|\n * | years          | Amount of years to be added        |\n * | months         | Amount of months to be added       |\n * | weeks          | Amount of weeks to be added        |\n * | days           | Amount of days to be added         |\n * | hours          | Amount of hours to be added        |\n * | minutes        | Amount of minutes to be added      |\n * | seconds        | Amount of seconds to be added      |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport default function add(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || typeof duration !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0; // Add years and months\n\n  var date = toDate(dirtyDate);\n  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date; // Add weeks and days\n\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths; // Add days, hours, minutes and seconds\n\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  var finalDate = new Date(dateWithDays.getTime() + msToAdd);\n  return finalDate;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isWeekend\n * @category Weekday Helpers\n * @summary Does the given date fall on a weekend?\n *\n * @description\n * Does the given date fall on a weekend?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date falls on a weekend\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Does 5 October 2014 fall on a weekend?\n * const result = isWeekend(new Date(2014, 9, 5))\n * //=> true\n */\n\nexport default function isWeekend(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day === 0 || day === 6;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSunday\n * @category Weekday Helpers\n * @summary Is the given date Sunday?\n *\n * @description\n * Is the given date Sunday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 21 September 2014 Sunday?\n * var result = isSunday(new Date(2014, 8, 21))\n * //=> true\n */\n\nexport default function isSunday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 0;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSaturday\n * @category Weekday Helpers\n * @summary Is the given date Saturday?\n *\n * @description\n * Is the given date Saturday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Saturday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 27 September 2014 Saturday?\n * var result = isSaturday(new Date(2014, 8, 27))\n * //=> true\n */\n\nexport default function isSaturday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 6;\n}","import isWeekend from \"../isWeekend/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isSunday from \"../isSunday/index.js\";\nimport isSaturday from \"../isSaturday/index.js\";\n/**\n * @name addBusinessDays\n * @category Day Helpers\n * @summary Add the specified number of business days (mon - fri) to the given date.\n *\n * @description\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of business days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the business days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 business days to 1 September 2014:\n * const result = addBusinessDays(new Date(2014, 8, 1), 10)\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\n */\n\nexport default function addBusinessDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var startedOnWeekend = isWeekend(date);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) return new Date(NaN);\n  var hours = date.getHours();\n  var sign = amount < 0 ? -1 : 1;\n  var fullWeeks = toInteger(amount / 5);\n  date.setDate(date.getDate() + fullWeeks * 7); // Get remaining days not part of a full week\n\n  var restDays = Math.abs(amount % 5); // Loops over remaining days\n\n  while (restDays > 0) {\n    date.setDate(date.getDate() + sign);\n    if (!isWeekend(date)) restDays -= 1;\n  } // If the date is a weekend day and we reduce a dividable of\n  // 5 from it, we land on a weekend date.\n  // To counter this, we add days accordingly to land on the next business day\n\n\n  if (startedOnWeekend && isWeekend(date) && amount !== 0) {\n    // If we're reducing days, we want to add days until we land on a weekday\n    // If we're adding days we want to reduce days until we land on a weekday\n    if (isSaturday(date)) date.setDate(date.getDate() + (sign < 0 ? 2 : -1));\n    if (isSunday(date)) date.setDate(date.getDate() + (sign < 0 ? 1 : -2));\n  } // Restore hours to avoid DST lag\n\n\n  date.setHours(hours);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_HOUR = 3600000;\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\n\nexport default function addHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import startOfWeek from \"../startOfWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return startOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}","import toDate from \"../toDate/index.js\";\nimport startOfISOWeek from \"../startOfISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `getISOYear` to `getISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `getWeekYear`.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\n\nexport default function getISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getISOWeekYear from \"../getISOWeekYear/index.js\";\nimport startOfISOWeek from \"../startOfISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\n\nexport default function startOfISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  var date = startOfISOWeek(fourthOfJanuary);\n  return date;\n}","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport startOfISOWeekYear from \"../startOfISOWeekYear/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Set the ISO week-numbering year to the given date.\n *\n * @description\n * Set the ISO week-numbering year to the given date,\n * saving the week number and the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `setISOYear` to `setISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `setWeekYear`.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} isoWeekYear - the ISO week-numbering year of the new date\n * @returns {Date} the new date with the ISO week-numbering year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set ISO week-numbering year 2007 to 29 December 2008:\n * const result = setISOWeekYear(new Date(2008, 11, 29), 2007)\n * //=> Mon Jan 01 2007 00:00:00\n */\n\nexport default function setISOWeekYear(dirtyDate, dirtyISOWeekYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeekYear = toInteger(dirtyISOWeekYear);\n  var diff = differenceInCalendarDays(date, startOfISOWeekYear(date));\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setFullYear(isoWeekYear, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  date = startOfISOWeekYear(fourthOfJanuary);\n  date.setDate(date.getDate() + diff);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport getISOWeekYear from \"../getISOWeekYear/index.js\";\nimport setISOWeekYear from \"../setISOWeekYear/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Add the specified number of ISO week-numbering years to the given date.\n *\n * @description\n * Add the specified number of ISO week-numbering years to the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `addISOYears` to `addISOWeekYears`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `addWeekYears`.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of ISO week-numbering years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the ISO week-numbering years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 ISO week-numbering years to 2 July 2010:\n * const result = addISOWeekYears(new Date(2010, 6, 2), 5)\n * //=> Fri Jun 26 2015 00:00:00\n */\n\nexport default function addISOWeekYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return setISOWeekYear(dirtyDate, getISOWeekYear(dirtyDate) + amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\n\nexport default function addMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addQuarters\n * @category Quarter Helpers\n * @summary Add the specified number of year quarters to the given date.\n *\n * @description\n * Add the specified number of year quarters to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of quarters to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the quarters added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 1 quarter to 1 September 2014:\n * const result = addQuarters(new Date(2014, 8, 1), 1)\n * //=> Mon Dec 01 2014 00:00:00\n */\n\nexport default function addQuarters(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var months = amount * 3;\n  return addMonths(dirtyDate, months);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\n\nexport default function addSeconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * 1000);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of week to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\n\nexport default function addWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var days = amount * 7;\n  return addDays(dirtyDate, days);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nexport default function addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name areIntervalsOverlapping\n * @category Interval Helpers\n * @summary Is the given time interval overlapping with another time interval?\n *\n * @description\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `areRangesOverlapping` to `areIntervalsOverlapping`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   areRangesOverlapping(\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   areIntervalsOverlapping(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n *   )\n *   ```\n *\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.inclusive=false] - whether the comparison is inclusive or not\n * @returns {Boolean} whether the time intervals are overlapping\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> true\n *\n * @example\n * // For non-overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> false\n *\n * @example\n * // For adjacent time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\n * )\n * //=> false\n *\n * @example\n * // Using the inclusive option:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\n * )\n * //=> false\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\n *   { inclusive: true }\n * )\n * //=> true\n */\n\nexport default function areIntervalsOverlapping(dirtyIntervalLeft, dirtyIntervalRight) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    inclusive: false\n  };\n  requiredArgs(2, arguments);\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = toDate(intervalLeft.start).getTime();\n  var leftEndTime = toDate(intervalLeft.end).getTime();\n  var rightStartTime = toDate(intervalRight.start).getTime();\n  var rightEndTime = toDate(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  if (options.inclusive) {\n    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n  }\n\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name max\n * @category Common Helpers\n * @summary Return the latest of the given dates.\n *\n * @description\n * Return the latest of the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - `max` function now accepts an array of dates rather than spread arguments.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   var date1 = new Date(1989, 6, 10)\n *   var date2 = new Date(1987, 1, 11)\n *   var maxDate = max(date1, date2)\n *\n *   // v2.0.0 onward:\n *   var dates = [new Date(1989, 6, 10), new Date(1987, 1, 11)]\n *   var maxDate = max(dates)\n *   ```\n *\n * @param {Date[]|Number[]} datesArray - the dates to compare\n * @returns {Date} the latest of the dates\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which of these dates is the latest?\n * var result = max([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Sun Jul 02 1995 00:00:00\n */\n\nexport default function max(dirtyDatesArray) {\n  requiredArgs(1, arguments);\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\n  } else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  } else {\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\n    return new Date(NaN);\n  }\n\n  var result;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (result === undefined || result < currentDate || isNaN(Number(currentDate))) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name min\n * @category Common Helpers\n * @summary Returns the earliest of the given dates.\n *\n * @description\n * Returns the earliest of the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - `min` function now accepts an array of dates rather than spread arguments.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   const date1 = new Date(1989, 6, 10)\n *   const date2 = new Date(1987, 1, 11)\n *   const minDate = min(date1, date2)\n *\n *   // v2.0.0 onward:\n *   const dates = [new Date(1989, 6, 10), new Date(1987, 1, 11)]\n *   const minDate = min(dates)\n *   ```\n *\n * @param {Date[]|Number[]} datesArray - the dates to compare\n * @returns {Date} - the earliest of the dates\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which of these dates is the earliest?\n * const result = min([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Wed Feb 11 1987 00:00:00\n */\n\nexport default function min(dirtyDatesArray) {\n  requiredArgs(1, arguments);\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\n  } else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  } else {\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\n    return new Date(NaN);\n  }\n\n  var result;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (result === undefined || result > currentDate || isNaN(currentDate.getDate())) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}","import max from \"../max/index.js\";\nimport min from \"../min/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name clamp\n * @category Interval Helpers\n * @summary Return a date bounded by the start and the end of the given interval\n *\n * @description\n * Clamps a date to the lower bound with the start of the interval and the upper\n * bound with the end of the interval.\n *\n * - When the date is less than the start of the interval, the start is returned.\n * - When the date is greater than the end of the interval, the end is returned.\n * - Otherwise the date is returned.\n *\n * @example\n * // What is Mar, 21, 2021 bounded to an interval starting at Mar, 22, 2021 and ending at Apr, 01, 2021\n * const result = clamp(new Date(2021, 2, 21), {\n *   start: new Date(2021, 2, 22),\n *   end: new Date(2021, 3, 1),\n * })\n * //=> Mon Mar 22 2021 00:00:00\n *\n * @param {Date | Number} date - the date to be bounded\n * @param {Interval} interval - the interval to bound to\n * @returns {Date} the date bounded by the start and the end of the interval\n * @throws {TypeError} 2 arguments required\n */\n\nexport default function clamp(date, _ref) {\n  var start = _ref.start,\n      end = _ref.end;\n  requiredArgs(2, arguments);\n  return min([max([date, start]), end]);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name closestIndexTo\n * @category Common Helpers\n * @summary Return an index of the closest date from the array comparing to the given date.\n *\n * @description\n * Return an index of the closest date from the array comparing to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now, `closestIndexTo` doesn't throw an exception\n *   when the second argument is not an array, and returns Invalid Date instead.\n *\n * @param {Date|Number} dateToCompare - the date to compare with\n * @param {Date[]|Number[]} datesArray - the array to search\n * @returns {Number} an index of the date closest to the given date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Which date is closer to 6 September 2015?\n * var dateToCompare = new Date(2015, 8, 6)\n * var datesArray = [\n *   new Date(2015, 0, 1),\n *   new Date(2016, 0, 1),\n *   new Date(2017, 0, 1)\n * ]\n * var result = closestIndexTo(dateToCompare, datesArray)\n * //=> 1\n */\n\nexport default function closestIndexTo(dirtyDateToCompare, dirtyDatesArray) {\n  requiredArgs(2, arguments);\n  var dateToCompare = toDate(dirtyDateToCompare);\n\n  if (isNaN(dateToCompare)) {\n    return NaN;\n  }\n\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray; // `dirtyDatesArray` is undefined or null\n\n  if (dirtyDatesArray == null) {\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate, index) {\n    var currentDate = toDate(dirtyDate);\n\n    if (isNaN(currentDate)) {\n      result = NaN;\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < minDistance) {\n      result = index;\n      minDistance = distance;\n    }\n  });\n  return result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name closestTo\n * @category Common Helpers\n * @summary Return a date from the array closest to the given date.\n *\n * @description\n * Return a date from the array closest to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now, `closestTo` doesn't throw an exception\n *   when the second argument is not an array, and returns Invalid Date instead.\n *\n * @param {Date|Number} dateToCompare - the date to compare with\n * @param {Date[]|Number[]} datesArray - the array to search\n * @returns {Date} the date from the array closest to the given date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n * var dateToCompare = new Date(2015, 8, 6)\n * var result = closestTo(dateToCompare, [\n *   new Date(2000, 0, 1),\n *   new Date(2030, 0, 1)\n * ])\n * //=> Tue Jan 01 2030 00:00:00\n */\n\nexport default function closestTo(dirtyDateToCompare, dirtyDatesArray) {\n  requiredArgs(2, arguments);\n  var dateToCompare = toDate(dirtyDateToCompare);\n\n  if (isNaN(dateToCompare)) {\n    return new Date(NaN);\n  }\n\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray; // `dirtyDatesArray` is undefined or null\n\n  if (dirtyDatesArray == null) {\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (isNaN(currentDate)) {\n      result = new Date(NaN);\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < minDistance) {\n      result = currentDate;\n      minDistance = distance;\n    }\n  });\n  return result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareDesc\n * @category Common Helpers\n * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return -1 if the first date is after the second,\n * 1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:\n * const result = compareDesc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> 1\n *\n * @example\n * // Sort the array of dates in reverse chronological order:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareDesc)\n * //=> [\n * //   Sun Jul 02 1995 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Wed Feb 11 1987 00:00:00\n * // ]\n */\n\nexport default function compareDesc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff > 0) {\n    return -1;\n  } else if (diff < 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { daysInWeek } from \"../constants/index.js\";\n/**\n * @name daysToWeeks\n * @category Conversion Helpers\n * @summary Convert days to weeks.\n *\n * @description\n * Convert a number of days to a full number of weeks.\n *\n * @param {number} days - number of days to be converted\n *\n * @returns {number} the number of days converted in weeks\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 14 days to weeks:\n * const result = daysToWeeks(14)\n * //=> 2\n *\n * @example\n * // It uses floor rounding:\n * const result = daysToWeeks(13)\n * //=> 1\n */\n\nexport default function daysToWeeks(days) {\n  requiredArgs(1, arguments);\n  var weeks = days / daysInWeek;\n  return Math.floor(weeks);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\n\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}","import startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day?\n *\n * @description\n * Are the given dates in the same day?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","import isValid from \"../isValid/index.js\";\nimport isWeekend from \"../isWeekend/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport isSameDay from \"../isSameDay/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInBusinessDays\n * @category Day Helpers\n * @summary Get the number of business days between the given dates.\n *\n * @description\n * Get the number of business day periods between the given dates.\n * Business days being days that arent in the weekend.\n * Like `differenceInCalendarDays`, the function removes the times from\n * the dates before calculating the difference.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of business days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many business days are between\n * // 10 January 2014 and 20 July 2014?\n * var result = differenceInBusinessDays(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 0, 10)\n * )\n * //=> 136\n */\n\nexport default function differenceInBusinessDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  if (!isValid(dateLeft) || !isValid(dateRight)) return NaN;\n  var calendarDifference = differenceInCalendarDays(dateLeft, dateRight);\n  var sign = calendarDifference < 0 ? -1 : 1;\n  var weeks = toInteger(calendarDifference / 7);\n  var result = weeks * 5;\n  dateRight = addDays(dateRight, weeks * 7); // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week\n\n  while (!isSameDay(dateLeft, dateRight)) {\n    // sign is used to account for both negative and positive differences\n    result += isWeekend(dateRight) ? 0 : sign;\n    dateRight = addDays(dateRight, sign);\n  }\n\n  return result === 0 ? 0 : result;\n}","import getISOWeekYear from \"../getISOWeekYear/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of calendar ISO week-numbering years between the given dates.\n *\n * @description\n * Get the number of calendar ISO week-numbering years between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `differenceInCalendarISOYears` to `differenceInCalendarISOWeekYears`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `addWeekYears`.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar ISO week-numbering years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar ISO week-numbering years are 1 January 2010 and 1 January 2012?\n * const result = differenceInCalendarISOWeekYears(\n *   new Date(2012, 0, 1),\n *   new Date(2010, 0, 1)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarISOWeekYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  return getISOWeekYear(dirtyDateLeft) - getISOWeekYear(dirtyDateRight);\n}","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfISOWeek from \"../startOfISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name differenceInCalendarISOWeeks\n * @category ISO Week Helpers\n * @summary Get the number of calendar ISO weeks between the given dates.\n *\n * @description\n * Get the number of calendar ISO weeks between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar ISO weeks\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\n * const result = differenceInCalendarISOWeeks(\n *   new Date(2014, 6, 21),\n *   new Date(2014, 6, 6)\n * )\n * //=> 3\n */\n\nexport default function differenceInCalendarISOWeeks(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfISOWeekLeft = startOfISOWeek(dirtyDateLeft);\n  var startOfISOWeekRight = startOfISOWeek(dirtyDateRight);\n  var timestampLeft = startOfISOWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfISOWeekLeft);\n  var timestampRight = startOfISOWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfISOWeekRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getQuarter\n * @category Quarter Helpers\n * @summary Get the year quarter of the given date.\n *\n * @description\n * Get the year quarter of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which quarter is 2 July 2014?\n * const result = getQuarter(new Date(2014, 6, 2))\n * //=> 3\n */\n\nexport default function getQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var quarter = Math.floor(date.getMonth() / 3) + 1;\n  return quarter;\n}","import getQuarter from \"../getQuarter/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarQuarters\n * @category Quarter Helpers\n * @summary Get the number of calendar quarters between the given dates.\n *\n * @description\n * Get the number of calendar quarters between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar quarters\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar quarters are between 31 December 2013 and 2 July 2014?\n * var result = differenceInCalendarQuarters(\n *   new Date(2014, 6, 2),\n *   new Date(2013, 11, 31)\n * )\n * //=> 3\n */\n\nexport default function differenceInCalendarQuarters(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var quarterDiff = getQuarter(dateLeft) - getQuarter(dateRight);\n  return yearDiff * 4 + quarterDiff;\n}","import startOfWeek from \"../startOfWeek/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name differenceInCalendarWeeks\n * @category Week Helpers\n * @summary Get the number of calendar weeks between the given dates.\n *\n * @description\n * Get the number of calendar weeks between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Number} the number of calendar weeks\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5)\n * )\n * //=> 3\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5),\n *   { weekStartsOn: 1 }\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarWeeks(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var startOfWeekLeft = startOfWeek(dirtyDateLeft, dirtyOptions);\n  var startOfWeekRight = startOfWeek(dirtyDateRight, dirtyOptions);\n  var timestampLeft = startOfWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekLeft);\n  var timestampRight = startOfWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() - dateRight.getFullYear();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\n\n\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dateLeft, dateRight) {\n  requiredArgs(2, arguments);\n  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();\n}","var roundingMap = {\n  ceil: Math.ceil,\n  round: Math.round,\n  floor: Math.floor,\n  trunc: function (value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  } // Math.trunc is not supported by IE\n\n};\nvar defaultRoundingMethod = 'trunc';\nexport function getRoundingMethod(method) {\n  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];\n}","import { millisecondsInHour } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\n\nexport default function differenceInHours(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addISOWeekYears from \"../addISOWeekYears/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Subtract the specified number of ISO week-numbering years from the given date.\n *\n * @description\n * Subtract the specified number of ISO week-numbering years from the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `subISOYears` to `subISOWeekYears`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `setWeekYear`.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of ISO week-numbering years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the ISO week-numbering years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 ISO week-numbering years from 1 September 2014:\n * const result = subISOWeekYears(new Date(2014, 8, 1), 5)\n * //=> Mon Aug 31 2009 00:00:00\n */\n\nexport default function subISOWeekYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addISOWeekYears(dirtyDate, -amount);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarISOWeekYears from \"../differenceInCalendarISOWeekYears/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport subISOWeekYears from \"../subISOWeekYears/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of full ISO week-numbering years between the given dates.\n *\n * @description\n * Get the number of full ISO week-numbering years between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `differenceInISOYears` to `differenceInISOWeekYears`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `addWeekYears`.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full ISO week-numbering years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full ISO week-numbering years are between 1 January 2010 and 1 January 2012?\n * var result = differenceInISOWeekYears(\n *   new Date(2012, 0, 1),\n *   new Date(2010, 0, 1)\n * )\n * //=> 1\n */\n\nexport default function differenceInISOWeekYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarISOWeekYears(dateLeft, dateRight));\n  dateLeft = subISOWeekYears(dateLeft, sign * difference); // Math.abs(diff in full ISO years - diff in calendar ISO years) === 1\n  // if last calendar ISO year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastISOWeekYearNotFull = Number(compareAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastISOWeekYearNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import { millisecondsInMinute } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\n\nexport default function differenceInMinutes(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * var result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month\n\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","import differenceInMonths from \"../differenceInMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInQuarters\n * @category Quarter Helpers\n * @summary Get the number of quarters between the given dates.\n *\n * @description\n * Get the number of quarters between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of full quarters\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full quarters are between 31 December 2013 and 2 July 2014?\n * const result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))\n * //=> 2\n */\n\nexport default function differenceInQuarters(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMonths(dateLeft, dateRight) / 3;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import differenceInDays from \"../differenceInDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInWeeks\n * @category Week Helpers\n * @summary Get the number of full weeks between the given dates.\n *\n * @description\n * Get the number of full weeks between two dates. Fractional weeks are\n * truncated towards zero by default.\n *\n * One \"full week\" is the distance between a local time in one day to the same\n * local time 7 days earlier or later. A full week can sometimes be less than\n * or more than 7*24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 7*24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/(7*24))|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of full weeks\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))\n * //=> 2\n *\n * // How many full weeks are between\n * // 1 March 2020 0:00 and 6 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 8 weeks (54 days),\n * // even if DST starts and the period has\n * // only 54*24-1 hours.\n * const result = differenceInWeeks(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 6)\n * )\n * //=> 8\n */\n\nexport default function differenceInWeeks(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInDays(dateLeft, dateRight) / 7;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarYears from \"../differenceInCalendarYears/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\n\nexport default function differenceInYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight)); // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n\n  dateLeft.setFullYear(1584);\n  dateRight.setFullYear(1584); // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - Number(isLastYearNotFull)); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachDayOfInterval\n * @category Interval Helpers\n * @summary Return the array of dates within the specified time interval.\n *\n * @description\n * Return the array of dates within the specified time interval.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `eachDay` to `eachDayOfInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   eachDay(new Date(2014, 0, 10), new Date(2014, 0, 20))\n *\n *   // v2.0.0 onward\n *\n *   eachDayOfInterval(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) }\n *   )\n *   ```\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * const result = eachDayOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 9, 10)\n * })\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\n\nexport default function eachDayOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setDate(currentDate.getDate() + step);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n\n  return dates;\n}","import addHours from \"../addHours/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name eachHourOfInterval\n * @category Interval Helpers\n * @summary Return the array of hours within the specified time interval.\n *\n * @description\n * Return the array of hours within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of hours from the hour of the interval start to the hour of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\n * var result = eachHourOfInterval({\n *   start: new Date(2014, 9, 6, 12),\n *   end: new Date(2014, 9, 6, 15)\n * })\n * //=> [\n * //   Mon Oct 06 2014 12:00:00,\n * //   Mon Oct 06 2014 13:00:00,\n * //   Mon Oct 06 2014 14:00:00,\n * //   Mon Oct 06 2014 15:00:00\n * // ]\n */\nexport default function eachHourOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setMinutes(0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addHours(currentDate, step);\n  }\n\n  return dates;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMinute\n * @category Minute Helpers\n * @summary Return the start of a minute for the given date.\n *\n * @description\n * Return the start of a minute for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a minute for 1 December 2014 22:15:45.400:\n * const result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:00\n */\n\nexport default function startOfMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setSeconds(0, 0);\n  return date;\n}","import addMinutes from \"../addMinutes/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport startOfMinute from \"../startOfMinute/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name eachMinuteOfInterval\n * @category Interval Helpers\n * @summary Return the array of minutes within the specified time interval.\n *\n * @description\n * Returns the array of minutes within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The starts of minutes from the hour of the interval start to the hour of the interval end\n * @throws {TypeError} 1 argument requie value should be more than 1.\n * @returns {Date[]} the array withred\n * @throws {RangeError} `options.step` must be a number equal or greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\n * const result = eachMinuteOfInterval({\n *   start: new Date(2014, 9, 14, 13),\n *   end: new Date(2014, 9, 14, 13, 3)\n * })\n * //=> [\n * //   Wed Oct 14 2014 13:00:00,\n * //   Wed Oct 14 2014 13:01:00,\n * //   Wed Oct 14 2014 13:02:00,\n * //   Wed Oct 14 2014 13:03:00\n * // ]\n */\nexport default function eachMinuteOfInterval(interval, options) {\n  requiredArgs(1, arguments);\n  var startDate = startOfMinute(toDate(interval.start));\n  var endDate = startOfMinute(toDate(interval.end));\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime();\n\n  if (startTime >= endTime) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number equal or greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addMinutes(currentDate, step);\n  }\n\n  return dates;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachMonthOfInterval\n * @category Interval Helpers\n * @summary Return the array of months within the specified time interval.\n *\n * @description\n * Return the array of months within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @returns {Date[]} the array with starts of months from the month of the interval start to the month of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each month between 6 February 2014 and 10 August 2014:\n * var result = eachMonthOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Sat Feb 01 2014 00:00:00,\n * //   Sat Mar 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Thu May 01 2014 00:00:00,\n * //   Sun Jun 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * //   Fri Aug 01 2014 00:00:00\n * // ]\n */\n\nexport default function eachMonthOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime();\n  var dates = []; // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setDate(1);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setMonth(currentDate.getMonth() + 1);\n  }\n\n  return dates;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfQuarter\n * @category Quarter Helpers\n * @summary Return the start of a year quarter for the given date.\n *\n * @description\n * Return the start of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a quarter for 2 September 2014 11:55:00:\n * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Jul 01 2014 00:00:00\n */\n\nexport default function startOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3;\n  date.setMonth(month, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import addQuarters from \"../addQuarters/index.js\";\nimport startOfQuarter from \"../startOfQuarter/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachQuarterOfInterval\n * @category Interval Helpers\n * @summary Return the array of quarters within the specified time interval.\n *\n * @description\n * Return the array of quarters within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @returns {Date[]} the array with starts of quarters from the quarter of the interval start to the quarter of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\n * var result = eachQuarterOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * // ]\n */\n\nexport default function eachQuarterOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var startDateQuarter = startOfQuarter(startDate);\n  var endDateQuarter = startOfQuarter(endDate);\n  endTime = endDateQuarter.getTime();\n  var quarters = [];\n  var currentQuarter = startDateQuarter;\n\n  while (currentQuarter.getTime() <= endTime) {\n    quarters.push(toDate(currentQuarter));\n    currentQuarter = addQuarters(currentQuarter, 1);\n  }\n\n  return quarters;\n}","import addWeeks from \"../addWeeks/index.js\";\nimport startOfWeek from \"../startOfWeek/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachWeekOfInterval\n * @category Interval Helpers\n * @summary Return the array of weeks within the specified time interval.\n *\n * @description\n * Return the array of weeks within the specified time interval.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date[]} the array with starts of weeks from the week of the interval start to the week of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be 0, 1, ..., 6\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each week within interval 6 October 2014 - 23 November 2014:\n * var result = eachWeekOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 10, 23)\n * })\n * //=> [\n * //   Sun Oct 05 2014 00:00:00,\n * //   Sun Oct 12 2014 00:00:00,\n * //   Sun Oct 19 2014 00:00:00,\n * //   Sun Oct 26 2014 00:00:00,\n * //   Sun Nov 02 2014 00:00:00,\n * //   Sun Nov 09 2014 00:00:00,\n * //   Sun Nov 16 2014 00:00:00,\n * //   Sun Nov 23 2014 00:00:00\n * // ]\n */\n\nexport default function eachWeekOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var startDateWeek = startOfWeek(startDate, options);\n  var endDateWeek = startOfWeek(endDate, options); // Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet\n\n  startDateWeek.setHours(15);\n  endDateWeek.setHours(15);\n  endTime = endDateWeek.getTime();\n  var weeks = [];\n  var currentWeek = startDateWeek;\n\n  while (currentWeek.getTime() <= endTime) {\n    currentWeek.setHours(0);\n    weeks.push(toDate(currentWeek));\n    currentWeek = addWeeks(currentWeek, 1);\n    currentWeek.setHours(15);\n  }\n\n  return weeks;\n}","import eachDayOfInterval from \"../eachDayOfInterval/index.js\";\nimport isSunday from \"../isSunday/index.js\";\nimport isWeekend from \"../isWeekend/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachWeekendOfInterval\n * @category Interval Helpers\n * @summary List all the Saturdays and Sundays in the given date interval.\n *\n * @description\n * Get all the Saturdays and Sundays in the given date interval.\n *\n * @param {Interval} interval - the given interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @returns {Date[]} an array containing all the Saturdays and Sundays\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Lists all Saturdays and Sundays in the given date interval\n * const result = eachWeekendOfInterval({\n *   start: new Date(2018, 8, 17),\n *   end: new Date(2018, 8, 30)\n * })\n * //=> [\n * //   Sat Sep 22 2018 00:00:00,\n * //   Sun Sep 23 2018 00:00:00,\n * //   Sat Sep 29 2018 00:00:00,\n * //   Sun Sep 30 2018 00:00:00\n * // ]\n */\n\nexport default function eachWeekendOfInterval(interval) {\n  requiredArgs(1, arguments);\n  var dateInterval = eachDayOfInterval(interval);\n  var weekends = [];\n  var index = 0;\n\n  while (index < dateInterval.length) {\n    var date = dateInterval[index++];\n\n    if (isWeekend(date)) {\n      weekends.push(date);\n      if (isSunday(date)) index = index + 5;\n    }\n  }\n\n  return weekends;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import eachWeekendOfInterval from \"../eachWeekendOfInterval/index.js\";\nimport startOfMonth from \"../startOfMonth/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachWeekendOfMonth\n * @category Month Helpers\n * @summary List all the Saturdays and Sundays in the given month.\n *\n * @description\n * Get all the Saturdays and Sundays in the given month.\n *\n * @param {Date|Number} date - the given month\n * @returns {Date[]} an array containing all the Saturdays and Sundays\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The passed date is invalid\n *\n * @example\n * // Lists all Saturdays and Sundays in the given month\n * const result = eachWeekendOfMonth(new Date(2022, 1, 1))\n * //=> [\n * //   Sat Feb 05 2022 00:00:00,\n * //   Sun Feb 06 2022 00:00:00,\n * //   Sat Feb 12 2022 00:00:00,\n * //   Sun Feb 13 2022 00:00:00,\n * //   Sat Feb 19 2022 00:00:00,\n * //   Sun Feb 20 2022 00:00:00,\n * //   Sat Feb 26 2022 00:00:00,\n * //   Sun Feb 27 2022 00:00:00\n * // ]\n */\n\nexport default function eachWeekendOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var startDate = startOfMonth(dirtyDate);\n  if (isNaN(startDate.getTime())) throw new RangeError('The passed date is invalid');\n  var endDate = endOfMonth(dirtyDate);\n  return eachWeekendOfInterval({\n    start: startDate,\n    end: endDate\n  });\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\n\nexport default function startOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var cleanDate = toDate(dirtyDate);\n  var date = new Date(0);\n  date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfYear\n * @category Year Helpers\n * @summary Return the end of a year for the given date.\n *\n * @description\n * Return the end of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a year for 2 September 2014 11:55:00:\n * var result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Dec 31 2014 23:59:59.999\n */\n\nexport default function endOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  date.setFullYear(year + 1, 0, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import eachWeekendOfInterval from \"../eachWeekendOfInterval/index.js\";\nimport startOfYear from \"../startOfYear/index.js\";\nimport endOfYear from \"../endOfYear/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachWeekendOfYear\n * @category Year Helpers\n * @summary List all the Saturdays and Sundays in the year.\n *\n * @description\n * Get all the Saturdays and Sundays in the year.\n *\n * @param {Date|Number} date - the given year\n * @returns {Date[]} an array containing all the Saturdays and Sundays\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The passed date is invalid\n *\n * @example\n * // Lists all Saturdays and Sundays in the year\n * var result = eachWeekendOfYear(new Date(2020, 1, 1))\n * //=> [\n * //   Sat Jan 03 2020 00:00:00,\n * //   Sun Jan 04 2020 00:00:00,\n * //   ...\n * //   Sun Dec 27 2020 00:00:00\n * // ]\n * ]\n */\n\nexport default function eachWeekendOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var startDate = startOfYear(dirtyDate);\n  if (isNaN(startDate)) throw new RangeError('The passed date is invalid');\n  var endDate = endOfYear(dirtyDate);\n  return eachWeekendOfInterval({\n    start: startDate,\n    end: endDate\n  });\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachYearOfInterval\n * @category Interval Helpers\n * @summary Return the array of yearly timestamps within the specified time interval.\n *\n * @description\n * Return the array of yearly timestamps within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @returns {Date[]} the array with starts of yearly timestamps from the month of the interval start to the month of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each year between 6 February 2014 and 10 August 2017:\n * const result = eachYearOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2017, 7, 10)\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Thu Jan 01 2015 00:00:00,\n * //   Fri Jan 01 2016 00:00:00,\n * //   Sun Jan 01 2017 00:00:00\n * // ]\n */\n\nexport default function eachYearOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setMonth(0, 1);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setFullYear(currentDate.getFullYear() + 1);\n  }\n\n  return dates;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDecade\n * @category Decade Helpers\n * @summary Return the end of a decade for the given date.\n *\n * @description\n * Return the end of a decade for the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a decade\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // The end of a decade for 12 May 1984 00:00:00:\n * const result = endOfDecade(new Date(1984, 4, 12, 00, 00, 00))\n * //=> Dec 31 1989 23:59:59.999\n */\n\nexport default function endOfDecade(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var decade = 9 + Math.floor(year / 10) * 10;\n  date.setFullYear(decade, 11, 31);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfHour\n * @category Hour Helpers\n * @summary Return the end of an hour for the given date.\n *\n * @description\n * Return the end of an hour for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of an hour for 2 September 2014 11:55:00:\n * const result = endOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:59:59.999\n */\n\nexport default function endOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nexport default function endOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setDate(date.getDate() + diff);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import endOfWeek from \"../endOfWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the end of an ISO week for the given date.\n *\n * @description\n * Return the end of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of an ISO week for 2 September 2014 11:55:00:\n * var result = endOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Sep 07 2014 23:59:59.999\n */\n\nexport default function endOfISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return endOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}","import getISOWeekYear from \"../getISOWeekYear/index.js\";\nimport startOfISOWeek from \"../startOfISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the end of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the end of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `endOfISOYear` to `endOfISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `addWeekYears`.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of an ISO week-numbering year for 2 July 2005:\n * const result = endOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Sun Jan 01 2006 23:59:59.999\n */\n\nexport default function endOfISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getISOWeekYear(dirtyDate);\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  var date = startOfISOWeek(fourthOfJanuaryOfNextYear);\n  date.setMilliseconds(date.getMilliseconds() - 1);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMinute\n * @category Minute Helpers\n * @summary Return the end of a minute for the given date.\n *\n * @description\n * Return the end of a minute for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a minute for 1 December 2014 22:15:45.400:\n * const result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:59.999\n */\n\nexport default function endOfMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setSeconds(59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfQuarter\n * @category Quarter Helpers\n * @summary Return the end of a year quarter for the given date.\n *\n * @description\n * Return the end of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a quarter for 2 September 2014 11:55:00:\n * const result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3 + 3;\n  date.setMonth(month, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfSecond\n * @category Second Helpers\n * @summary Return the end of a second for the given date.\n *\n * @description\n * Return the end of a second for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a second\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a second for 1 December 2014 22:15:45.400:\n * const result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.999\n */\n\nexport default function endOfSecond(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMilliseconds(999);\n  return date;\n}","import endOfDay from \"../endOfDay/index.js\";\n/**\n * @name endOfToday\n * @category Day Helpers\n * @summary Return the end of today.\n * @pure false\n *\n * @description\n * Return the end of today.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the end of today\n *\n * @example\n * // If today is 6 October 2014:\n * var result = endOfToday()\n * //=> Mon Oct 6 2014 23:59:59.999\n */\n\nexport default function endOfToday() {\n  return endOfDay(Date.now());\n}","/**\n * @name endOfTomorrow\n * @category Day Helpers\n * @summary Return the end of tomorrow.\n * @pure false\n *\n * @description\n * Return the end of tomorrow.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the end of tomorrow\n *\n * @example\n * // If today is 6 October 2014:\n * const result = endOfTomorrow()\n * //=> Tue Oct 7 2014 23:59:59.999\n */\nexport default function endOfTomorrow() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day + 1);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","/**\n * @name endOfYesterday\n * @category Day Helpers\n * @summary Return the end of yesterday.\n * @pure false\n *\n * @description\n * Return the end of yesterday.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the end of yesterday\n *\n * @example\n * // If today is 6 October 2014:\n * const result = endOfYesterday()\n * //=> Sun Oct 5 2014 23:59:59.999\n */\nexport default function endOfYesterday() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day - 1);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\n\nvar formatDistance = function (token, count, options) {\n  var result;\n  var tokenValue = formatDistanceLocale[token];\n\n  if (typeof tokenValue === 'string') {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace('{{count}}', count.toString());\n  }\n\n  if (options !== null && options !== void 0 && options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n};\n\nexport default formatDistance;","export default function buildFormatLongFn(args) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // TODO: Remove String()\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\n\nvar formatRelative = function (token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n};\n\nexport default formatRelative;","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challange you to try to remove it!\n\n    return valuesArray[index];\n  };\n}","import buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']\n}; // Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\n\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nvar ordinalNumber = function (dirtyNumber, _options) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n};\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return quarter - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","export default function buildMatchFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    }) : findKey(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    });\n    var value;\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}","export default function buildMatchPatternFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}","import buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\nimport buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","import formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import addLeadingZeros from \"../../addLeadingZeros/index.js\";\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaa':\n        return dayPeriodEnumValue;\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getUTCISOWeekYear from \"../getUTCISOWeekYear/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport startOfUTCISOWeekYear from \"../startOfUTCISOWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toInteger from \"../toInteger/index.js\";\nimport getUTCWeekYear from \"../getUTCWeekYear/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport startOfUTCWeekYear from \"../startOfUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import lightFormatters from \"../lightFormatters/index.js\";\nimport getUTCDayOfYear from \"../../../_lib/getUTCDayOfYear/index.js\";\nimport getUTCISOWeek from \"../../../_lib/getUTCISOWeek/index.js\";\nimport getUTCISOWeekYear from \"../../../_lib/getUTCISOWeekYear/index.js\";\nimport getUTCWeek from \"../../../_lib/getUTCWeek/index.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport addLeadingZeros from \"../../addLeadingZeros/index.js\";\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}","import isValid from \"../isValid/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/formatters/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import assign from \"../assign/index.js\";\nexport default function cloneObject(dirtyObject) {\n  return assign({}, dirtyObject);\n}","import compareAsc from \"../compareAsc/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWords ` to `formatDistance`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWords(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *\n *   // v2.0.0 onward\n *\n *   formatDistance(\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistance(dirtyDate, dirtyBaseDate) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  requiredArgs(2, arguments);\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\n  var months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance('halfAMinute', null, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return locale.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return locale.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 1000 * 60;\nvar MINUTES_IN_DAY = 60 * 24;\nvar MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;\nvar MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWordsStrict` to `formatDistanceStrict`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(2015, 0, 2),\n *     new Date(2014, 6, 2)\n *   ) //=> '6 months'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(2014, 6, 2),\n *     new Date(2015, 0, 2)\n *   ) //=> '6 months'\n *   ```\n *\n * - `partialMethod` option is renamed to `roundingMethod`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     { partialMethod: 'ceil' }\n *   ) //=> '2 minutes'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { roundingMethod: 'ceil' }\n *   ) //=> '2 minutes'\n *   ```\n *\n * - If `roundingMethod` is not specified, it now defaults to `round` instead of `floor`.\n *\n * - `unit` option now accepts one of the strings:\n *   'second', 'minute', 'hour', 'day', 'month' or 'year' instead of 's', 'm', 'h', 'd', 'M' or 'Y'\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     { unit: 'm' }\n *   )\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { unit: 'minute' }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'\n * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nexport default function formatDistanceStrict(dirtyDate, dirtyBaseDate) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  requiredArgs(2, arguments);\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain localize.formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var roundingMethod = options.roundingMethod == null ? 'round' : String(options.roundingMethod);\n  var roundingMethodFn;\n\n  if (roundingMethod === 'floor') {\n    roundingMethodFn = Math.floor;\n  } else if (roundingMethod === 'ceil') {\n    roundingMethodFn = Math.ceil;\n  } else if (roundingMethod === 'round') {\n    roundingMethodFn = Math.round;\n  } else {\n    throw new RangeError(\"roundingMethod must be 'floor', 'ceil' or 'round'\");\n  }\n\n  var milliseconds = dateRight.getTime() - dateLeft.getTime();\n  var minutes = milliseconds / MILLISECONDS_IN_MINUTE;\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft); // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n\n  var dstNormalizedMinutes = (milliseconds - timezoneOffset) / MILLISECONDS_IN_MINUTE;\n  var unit;\n\n  if (options.unit == null) {\n    if (minutes < 1) {\n      unit = 'second';\n    } else if (minutes < 60) {\n      unit = 'minute';\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'hour';\n    } else if (dstNormalizedMinutes < MINUTES_IN_MONTH) {\n      unit = 'day';\n    } else if (dstNormalizedMinutes < MINUTES_IN_YEAR) {\n      unit = 'month';\n    } else {\n      unit = 'year';\n    }\n  } else {\n    unit = String(options.unit);\n  } // 0 up to 60 seconds\n\n\n  if (unit === 'second') {\n    var seconds = roundingMethodFn(milliseconds / 1000);\n    return locale.formatDistance('xSeconds', seconds, localizeOptions); // 1 up to 60 mins\n  } else if (unit === 'minute') {\n    var roundedMinutes = roundingMethodFn(minutes);\n    return locale.formatDistance('xMinutes', roundedMinutes, localizeOptions); // 1 up to 24 hours\n  } else if (unit === 'hour') {\n    var hours = roundingMethodFn(minutes / 60);\n    return locale.formatDistance('xHours', hours, localizeOptions); // 1 up to 30 days\n  } else if (unit === 'day') {\n    var days = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 up to 12 months\n  } else if (unit === 'month') {\n    var months = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_MONTH);\n    return months === 12 && options.unit !== 'month' ? locale.formatDistance('xYears', 1, localizeOptions) : locale.formatDistance('xMonths', months, localizeOptions); // 1 year up to max Date\n  } else if (unit === 'year') {\n    var years = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_YEAR);\n    return locale.formatDistance('xYears', years, localizeOptions);\n  }\n\n  throw new RangeError(\"unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\");\n}","import distanceInWords from \"../formatDistance/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWordsToNow ` to `formatDistanceToNow`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsToNow(new Date(2014, 6, 2), { addSuffix: true })\n *   //=> 'in 6 months'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceToNow(new Date(2014, 6, 2), { addSuffix: true })\n *   //=> 'in 6 months'\n *   ```\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result specifies if now is earlier or later than the passed date\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * var result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * var result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * var result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistanceToNow(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  return distanceInWords(dirtyDate, Date.now(), dirtyOptions);\n}","import formatDistanceStrict from \"../formatDistanceStrict/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatDistanceToNowStrict\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * var result = formatDistanceToNowStrict(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * var result = formatDistanceToNowStrict(\n *   new Date(2015, 0, 1, 0, 0, 15)\n * )\n * //=> '20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * var result = formatDistanceToNowStrict(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in 1 year'\n *\n * @example\n * // If today is 28 January 2015,\n * // what is the distance to 1 January 2015, in months, rounded up??\n * var result = formatDistanceToNowStrict(new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = formatDistanceToNowStrict(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> '1 jaro'\n */\n\nexport default function formatDistanceToNowStrict(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  return formatDistanceStrict(dirtyDate, Date.now(), dirtyOptions);\n}","import defaultLocale from \"../locale/en-US/index.js\";\nvar defaultFormat = ['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds'];\n/**\n * @name formatDuration\n * @category Common Helpers\n * @summary Formats a duration in human-readable format\n *\n * @description\n * Return human-readable duration string i.e. \"9 months 2 days\"\n *\n * @param {Duration} duration - the duration to format\n * @param {Object} [options] - an object with options.\n\n * @param {string[]} [options.format=['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds']] - the array of units to format\n * @param {boolean} [options.zero=false] - should be zeros be included in the output?\n * @param {string} [options.delimiter=' '] - delimiter string\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {string} the formatted date string\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Format full duration\n * formatDuration({\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds\n *\n * @example\n * // Format partial duration\n * formatDuration({ months: 9, days: 2 })\n * //=> '9 months 2 days'\n *\n * @example\n * // Customize the format\n * formatDuration(\n *   {\n *     years: 2,\n *     months: 9,\n *     weeks: 1,\n *     days: 7,\n *     hours: 5,\n *     minutes: 9,\n *     seconds: 30\n *   },\n *   { format: ['months', 'weeks'] }\n * ) === '9 months 1 week'\n *\n * @example\n * // Customize the zeros presence\n * formatDuration({ years: 0, months: 9 })\n * //=> '9 months'\n * formatDuration({ years: 0, months: 9 }, { zero: true })\n * //=> '0 years 9 months'\n *\n * @example\n * // Customize the delimiter\n * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })\n * //=> '2 years, 9 months, 3 weeks'\n */\n\nexport default function formatDuration(duration, options) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var format = (options === null || options === void 0 ? void 0 : options.format) || defaultFormat;\n  var locale = (options === null || options === void 0 ? void 0 : options.locale) || defaultLocale;\n  var zero = (options === null || options === void 0 ? void 0 : options.zero) || false;\n  var delimiter = (options === null || options === void 0 ? void 0 : options.delimiter) || ' ';\n  var result = format.reduce(function (acc, unit) {\n    var token = \"x\".concat(unit.replace(/(^.)/, function (m) {\n      return m.toUpperCase();\n    }));\n    var addChunk = typeof duration[unit] === 'number' && (zero || duration[unit]);\n    return addChunk ? acc.concat(locale.formatDistance(token, duration[unit])) : acc;\n  }, []).join(delimiter);\n  return result;\n}","import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (http://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with time zone, or both.\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\n\nexport default function formatISO(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = addLeadingZeros(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with 'T'\n\n    var separator = result === '' ? '' : 'T'; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n\n    var time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n\n  return result;\n}","import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\n/**\n * @name formatISO9075\n * @category Common Helpers\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\n *\n * @description\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time, or both.\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18 19:00:52'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075, short format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918 190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, date only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, time only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52'\n */\n\nexport default function formatISO9075(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with a space\n\n    var separator = result === '' ? '' : ' '; // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(hour).concat(timeDelimiter).concat(minute).concat(timeDelimiter).concat(second);\n  }\n\n  return result;\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatISODuration\n * @category Common Helpers\n * @summary Format a duration object according as ISO 8601 duration string\n *\n * @description\n * Format a duration object according to the ISO 8601 duration standard (https://www.digi.com/resources/documentation/digidocs/90001437-13/reference/r_iso_8601_duration_format.htm)\n *\n * @param {Duration} duration - the duration to format\n *\n * @returns {String} The ISO 8601 duration string\n * @throws {TypeError} Requires 1 argument\n * @throws {Error} Argument must be an object\n *\n * @example\n * // Format the given duration as ISO 8601 string\n * const result = formatISODuration({\n *   years: 39,\n *   months: 2,\n *   days: 20,\n *   hours: 7,\n *   minutes: 5,\n *   seconds: 0\n * })\n * //=> 'P39Y2M20DT0H0M0S'\n */\n\nexport default function formatISODuration(duration) {\n  requiredArgs(1, arguments);\n  if (typeof duration !== 'object') throw new Error('Duration must be an object');\n  var _duration$years = duration.years,\n      years = _duration$years === void 0 ? 0 : _duration$years,\n      _duration$months = duration.months,\n      months = _duration$months === void 0 ? 0 : _duration$months,\n      _duration$days = duration.days,\n      days = _duration$days === void 0 ? 0 : _duration$days,\n      _duration$hours = duration.hours,\n      hours = _duration$hours === void 0 ? 0 : _duration$hours,\n      _duration$minutes = duration.minutes,\n      minutes = _duration$minutes === void 0 ? 0 : _duration$minutes,\n      _duration$seconds = duration.seconds,\n      seconds = _duration$seconds === void 0 ? 0 : _duration$seconds;\n  return \"P\".concat(years, \"Y\").concat(months, \"M\").concat(days, \"DT\").concat(hours, \"H\").concat(minutes, \"M\").concat(seconds, \"S\");\n}","import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n\n/**\n * @name formatRFC3339\n * @category Common Helpers\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n *\n * @description\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {0|1|2|3} [options.fractionDigits=0] - number of digits after the decimal point after seconds\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.fractionDigits` must be between 0 and 3\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 2 digits of second fraction:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 2 })\n * //=> '2019-09-18T19:00:52.23Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 3 })\n * //=> '2019-09-18T19:00:52.234Z'\n */\nexport default function formatRFC3339(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var _ref = dirtyOptions || {},\n      _ref$fractionDigits = _ref.fractionDigits,\n      fractionDigits = _ref$fractionDigits === void 0 ? 0 : _ref$fractionDigits; // Test if fractionDigits is between 0 and 3 _and_ is not NaN\n\n\n  if (!(fractionDigits >= 0 && fractionDigits <= 3)) {\n    throw new RangeError('fractionDigits must be between 0 and 3 inclusively');\n  }\n\n  var day = addLeadingZeros(originalDate.getDate(), 2);\n  var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n  var year = originalDate.getFullYear();\n  var hour = addLeadingZeros(originalDate.getHours(), 2);\n  var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n  var second = addLeadingZeros(originalDate.getSeconds(), 2);\n  var fractionalSecond = '';\n\n  if (fractionDigits > 0) {\n    var milliseconds = originalDate.getMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, fractionDigits - 3));\n    fractionalSecond = '.' + addLeadingZeros(fractionalSeconds, fractionDigits);\n  }\n\n  var offset = '';\n  var tzOffset = originalDate.getTimezoneOffset();\n\n  if (tzOffset !== 0) {\n    var absoluteOffset = Math.abs(tzOffset);\n    var hourOffset = addLeadingZeros(toInteger(absoluteOffset / 60), 2);\n    var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n    var sign = tzOffset < 0 ? '+' : '-';\n    offset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n  } else {\n    offset = 'Z';\n  }\n\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(second).concat(fractionalSecond).concat(offset);\n}","import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\nvar days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n/**\n * @name formatRFC7231\n * @category Common Helpers\n * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).\n *\n * @description\n * Return the formatted date string in RFC 7231 format.\n * The result will always be in UTC timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 7231 format:\n * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))\n * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'\n */\n\nexport default function formatRFC7231(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var dayName = days[originalDate.getUTCDay()];\n  var dayOfMonth = addLeadingZeros(originalDate.getUTCDate(), 2);\n  var monthName = months[originalDate.getUTCMonth()];\n  var year = originalDate.getUTCFullYear();\n  var hour = addLeadingZeros(originalDate.getUTCHours(), 2);\n  var minute = addLeadingZeros(originalDate.getUTCMinutes(), 2);\n  var second = addLeadingZeros(originalDate.getUTCSeconds(), 2); // Result variables.\n\n  return \"\".concat(dayName, \", \").concat(dayOfMonth, \" \").concat(monthName, \" \").concat(year, \" \").concat(hour, \":\").concat(minute, \":\").concat(second, \" GMT\");\n}","import differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport format from \"../format/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name formatRelative\n * @category Common Helpers\n * @summary Represent the date in words relative to the given base date.\n *\n * @description\n * Represent the date in words relative to the given base date.\n *\n * | Distance to the base date | Result                    |\n * |---------------------------|---------------------------|\n * | Previous 6 days           | last Sunday at 04:30 AM   |\n * | Last day                  | yesterday at 04:30 AM     |\n * | Same day                  | today at 04:30 AM         |\n * | Next day                  | tomorrow at 04:30 AM      |\n * | Next 6 days               | Sunday at 04:30 AM        |\n * | Other                     | 12/31/2017                |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to format\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {String} the date in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.locale` must contain `formatRelative` property\n *\n * @example\n * // Represent the date of 6 days ago in words relative to the given base date. In this example, today is Wednesday\n * const result = formatRelative(addDays(new Date(), -6), new Date())\n * //=> \"last Thursday at 12:45 AM\"\n */\nexport default function formatRelative(dirtyDate, dirtyBaseDate, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var baseDate = toDate(dirtyBaseDate);\n\n  var _ref = dirtyOptions || {},\n      _ref$locale = _ref.locale,\n      locale = _ref$locale === void 0 ? defaultLocale : _ref$locale,\n      _ref$weekStartsOn = _ref.weekStartsOn,\n      weekStartsOn = _ref$weekStartsOn === void 0 ? 0 : _ref$weekStartsOn;\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  if (!locale.formatRelative) {\n    throw new RangeError('locale must contain formatRelative property');\n  }\n\n  var diff = differenceInCalendarDays(date, baseDate);\n\n  if (isNaN(diff)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var token;\n\n  if (diff < -6) {\n    token = 'other';\n  } else if (diff < -1) {\n    token = 'lastWeek';\n  } else if (diff < 0) {\n    token = 'yesterday';\n  } else if (diff < 1) {\n    token = 'today';\n  } else if (diff < 2) {\n    token = 'tomorrow';\n  } else if (diff < 7) {\n    token = 'nextWeek';\n  } else {\n    token = 'other';\n  }\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var utcBaseDate = subMilliseconds(baseDate, getTimezoneOffsetInMilliseconds(baseDate));\n  var formatStr = locale.formatRelative(token, utcDate, utcBaseDate, {\n    locale: locale,\n    weekStartsOn: weekStartsOn\n  });\n  return format(date, formatStr, {\n    locale: locale,\n    weekStartsOn: weekStartsOn\n  });\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name fromUnixTime\n * @category Timestamp Helpers\n * @summary Create a date from a Unix timestamp.\n *\n * @description\n * Create a date from a Unix timestamp (in seconds). Decimal values will be discarded.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Number} unixTime - the given Unix timestamp (in seconds)\n * @returns {Date} the date\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Create the date 29 February 2012 11:45:05:\n * const result = fromUnixTime(1330515905)\n * //=> Wed Feb 29 2012 11:45:05\n */\n\nexport default function fromUnixTime(dirtyUnixTime) {\n  requiredArgs(1, arguments);\n  var unixTime = toInteger(dirtyUnixTime);\n  return toDate(unixTime * 1000);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDate\n * @category Day Helpers\n * @summary Get the day of the month of the given date.\n *\n * @description\n * Get the day of the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the month is 29 February 2012?\n * const result = getDate(new Date(2012, 1, 29))\n * //=> 29\n */\n\nexport default function getDate(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfMonth = date.getDate();\n  return dayOfMonth;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDay\n * @category Weekday Helpers\n * @summary Get the day of the week of the given date.\n *\n * @description\n * Get the day of the week of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {0|1|2|3|4|5|6} the day of week, 0 represents Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the week is 29 February 2012?\n * const result = getDay(new Date(2012, 1, 29))\n * //=> 3\n */\n\nexport default function getDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day;\n}","import toDate from \"../toDate/index.js\";\nimport startOfYear from \"../startOfYear/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\n\nexport default function getDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = differenceInCalendarDays(date, startOfYear(date));\n  var dayOfYear = diff + 1;\n  return dayOfYear;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDaysInMonth\n * @category Month Helpers\n * @summary Get the number of days in a month of the given date.\n *\n * @description\n * Get the number of days in a month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in February 2000?\n * const result = getDaysInMonth(new Date(2000, 1))\n * //=> 29\n */\n\nexport default function getDaysInMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var monthIndex = date.getMonth();\n  var lastDayOfMonth = new Date(0);\n  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);\n  lastDayOfMonth.setHours(0, 0, 0, 0);\n  return lastDayOfMonth.getDate();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLeapYear\n * @category Year Helpers\n * @summary Is the given date in the leap year?\n *\n * @description\n * Is the given date in the leap year?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the leap year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 1 September 2012 in the leap year?\n * var result = isLeapYear(new Date(2012, 8, 1))\n * //=> true\n */\n\nexport default function isLeapYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}","import toDate from \"../toDate/index.js\";\nimport isLeapYear from \"../isLeapYear/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDaysInYear\n * @category Year Helpers\n * @summary Get the number of days in a year of the given date.\n *\n * @description\n * Get the number of days in a year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in 2012?\n * const result = getDaysInYear(new Date(2012, 0, 1))\n * //=> 366\n */\n\nexport default function getDaysInYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n\n  if (String(new Date(date)) === 'Invalid Date') {\n    return NaN;\n  }\n\n  return isLeapYear(date) ? 366 : 365;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDecade\n * @category Decade Helpers\n * @summary Get the decade of the given date.\n *\n * @description\n * Get the decade of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year of decade\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which decade belongs 27 November 1942?\n * const result = getDecade(new Date(1942, 10, 27))\n * //=> 1940\n */\n\nexport default function getDecade(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var decade = Math.floor(year / 10) * 10;\n  return decade;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getHours\n * @category Hour Helpers\n * @summary Get the hours of the given date.\n *\n * @description\n * Get the hours of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the hours of 29 February 2012 11:45:00:\n * const result = getHours(new Date(2012, 1, 29, 11, 45))\n * //=> 11\n */\n\nexport default function getHours(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var hours = date.getHours();\n  return hours;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getISODay\n * @category Weekday Helpers\n * @summary Get the day of the ISO week of the given date.\n *\n * @description\n * Get the day of the ISO week of the given date,\n * which is 7 for Sunday, 1 for Monday etc.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the ISO week is 26 February 2012?\n * const result = getISODay(new Date(2012, 1, 26))\n * //=> 7\n */\n\nexport default function getISODay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n\n  if (day === 0) {\n    day = 7;\n  }\n\n  return day;\n}","import toDate from \"../toDate/index.js\";\nimport startOfISOWeek from \"../startOfISOWeek/index.js\";\nimport startOfISOWeekYear from \"../startOfISOWeekYear/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\n\nexport default function getISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import startOfISOWeekYear from \"../startOfISOWeekYear/index.js\";\nimport addWeeks from \"../addWeeks/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name getISOWeeksInYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of weeks in an ISO week-numbering year of the given date.\n *\n * @description\n * Get the number of weeks in an ISO week-numbering year of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of ISO weeks in a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many weeks are in ISO week-numbering year 2015?\n * const result = getISOWeeksInYear(new Date(2015, 1, 11))\n * //=> 53\n */\n\nexport default function getISOWeeksInYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var thisYear = startOfISOWeekYear(dirtyDate);\n  var nextYear = startOfISOWeekYear(addWeeks(thisYear, 60));\n  var diff = nextYear.valueOf() - thisYear.valueOf(); // Round the number of weeks to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getMilliseconds\n * @category Millisecond Helpers\n * @summary Get the milliseconds of the given date.\n *\n * @description\n * Get the milliseconds of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the milliseconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the milliseconds of 29 February 2012 11:45:05.123:\n * const result = getMilliseconds(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 123\n */\n\nexport default function getMilliseconds(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var milliseconds = date.getMilliseconds();\n  return milliseconds;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getMinutes\n * @category Minute Helpers\n * @summary Get the minutes of the given date.\n *\n * @description\n * Get the minutes of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the minutes\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the minutes of 29 February 2012 11:45:05:\n * const result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 45\n */\n\nexport default function getMinutes(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = date.getMinutes();\n  return minutes;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getMonth\n * @category Month Helpers\n * @summary Get the month of the given date.\n *\n * @description\n * Get the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which month is 29 February 2012?\n * const result = getMonth(new Date(2012, 1, 29))\n * //=> 1\n */\n\nexport default function getMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  return month;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000;\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `getOverlappingDaysInRanges` to `getOverlappingDaysInIntervals`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   getOverlappingDaysInRanges(\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   getOverlappingDaysInIntervals(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n *   )\n *   ```\n *\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link docs/Interval}\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link docs/Interval}\n * @returns {Number} the number of days that overlap in two time intervals\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nexport default function getOverlappingDaysInIntervals(dirtyIntervalLeft, dirtyIntervalRight) {\n  requiredArgs(2, arguments);\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = toDate(intervalLeft.start).getTime();\n  var leftEndTime = toDate(intervalLeft.end).getTime();\n  var rightStartTime = toDate(intervalRight.start).getTime();\n  var rightEndTime = toDate(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var isOverlapping = leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n\n  if (!isOverlapping) {\n    return 0;\n  }\n\n  var overlapStartDate = rightStartTime < leftStartTime ? leftStartTime : rightStartTime;\n  var overlapEndDate = rightEndTime > leftEndTime ? leftEndTime : rightEndTime;\n  var differenceInMs = overlapEndDate - overlapStartDate;\n  return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getSeconds\n * @category Second Helpers\n * @summary Get the seconds of the given date.\n *\n * @description\n * Get the seconds of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the seconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the seconds of 29 February 2012 11:45:05.123:\n * const result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 5\n */\n\nexport default function getSeconds(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var seconds = date.getSeconds();\n  return seconds;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getTime\n * @category Timestamp Helpers\n * @summary Get the milliseconds timestamp of the given date.\n *\n * @description\n * Get the milliseconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05.123:\n * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 1330515905123\n */\n\nexport default function getTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  return timestamp;\n}","import getTime from \"../getTime/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getUnixTime\n * @category Timestamp Helpers\n * @summary Get the seconds timestamp of the given date.\n *\n * @description\n * Get the seconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05 CET:\n * const result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 1330512305\n */\n\nexport default function getUnixTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  return Math.floor(getTime(dirtyDate) / 1000);\n}","import startOfWeek from \"../startOfWeek/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Number} the local week-numbering year\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport default function getWeekYear(dirtyDate, options) {\n  var _options$locale, _options$locale$optio;\n\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var localeFirstWeekContainsDate = options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = (options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  var startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  var startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getWeekYear from \"../getWeekYear/index.js\";\nimport startOfWeek from \"../startOfWeek/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Date} the start of a week-numbering year\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport default function startOfWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  var date = startOfWeek(firstWeek, dirtyOptions);\n  return date;\n}","import startOfWeek from \"../startOfWeek/index.js\";\nimport startOfWeekYear from \"../startOfWeekYear/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Number} the week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getISOWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport default function getWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfWeek(date, options).getTime() - startOfWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import getDate from \"../getDate/index.js\";\nimport getDay from \"../getDay/index.js\";\nimport startOfMonth from \"../startOfMonth/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getWeekOfMonth\n * @category Week Helpers\n * @summary Get the week of the month of the given date.\n *\n * @description\n * Get the week of the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Number} the week of month\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // Which week of the month is 9 November 2017?\n * var result = getWeekOfMonth(new Date(2017, 10, 9))\n * //=> 2\n */\n\nexport default function getWeekOfMonth(date, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var currentDayOfMonth = getDate(date);\n\n  if (isNaN(currentDayOfMonth)) {\n    return currentDayOfMonth;\n  }\n\n  var startWeekDay = getDay(startOfMonth(date));\n  var lastDayOfFirstWeek = 0;\n\n  if (startWeekDay >= weekStartsOn) {\n    lastDayOfFirstWeek = weekStartsOn + 7 - startWeekDay;\n  } else {\n    lastDayOfFirstWeek = weekStartsOn - startWeekDay;\n  }\n\n  var weekNumber = 1;\n\n  if (currentDayOfMonth > lastDayOfFirstWeek) {\n    var remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;\n    weekNumber = weekNumber + Math.ceil(remainingDaysAfterFirstWeek / 7);\n  }\n\n  return weekNumber;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name lastDayOfMonth\n * @category Month Helpers\n * @summary Return the last day of a month for the given date.\n *\n * @description\n * Return the last day of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of a month for 2 September 2014 11:55:00:\n * var result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 00:00:00\n */\n\nexport default function lastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import differenceInCalendarWeeks from \"../differenceInCalendarWeeks/index.js\";\nimport lastDayOfMonth from \"../lastDayOfMonth/index.js\";\nimport startOfMonth from \"../startOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name getWeeksInMonth\n * @category Week Helpers\n * @summary Get the number of calendar weeks a month spans.\n *\n * @description\n * Get the number of calendar weeks the month in the given date spans.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Number} the number of calendar weeks\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // How many calendar weeks does February 2015 span?\n * const result = getWeeksInMonth(new Date(2015, 1, 8))\n * //=> 4\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks does July 2017 span?\n * const result = getWeeksInMonth(new Date(2017, 6, 5), { weekStartsOn: 1 })\n * //=> 6\n */\nexport default function getWeeksInMonth(date, options) {\n  requiredArgs(1, arguments);\n  return differenceInCalendarWeeks(lastDayOfMonth(date), startOfMonth(date), options) + 1;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * const result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\n\nexport default function getYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  return year;\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { millisecondsInHour } from \"../constants/index.js\";\n/**\n * @name hoursToMilliseconds\n * @category  Conversion Helpers\n * @summary Convert hours to milliseconds.\n *\n * @description\n * Convert a number of hours to a full number of milliseconds.\n *\n * @param {number} hours - number of hours to be converted\n *\n * @returns {number} the number of hours converted to milliseconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 hours to milliseconds:\n * const result = hoursToMilliseconds(2)\n * //=> 7200000\n */\n\nexport default function hoursToMilliseconds(hours) {\n  requiredArgs(1, arguments);\n  return Math.floor(hours * millisecondsInHour);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { minutesInHour } from \"../constants/index.js\";\n/**\n * @name hoursToMinutes\n * @category Conversion Helpers\n * @summary Convert hours to minutes.\n *\n * @description\n * Convert a number of hours to a full number of minutes.\n *\n * @param {number} hours - number of hours to be converted\n *\n * @returns {number} the number of hours converted in minutes\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 hours to minutes:\n * const result = hoursToMinutes(2)\n * //=> 120\n */\n\nexport default function hoursToMinutes(hours) {\n  requiredArgs(1, arguments);\n  return Math.floor(hours * minutesInHour);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { secondsInHour } from \"../constants/index.js\";\n/**\n * @name hoursToSeconds\n * @category Conversion Helpers\n * @summary Convert hours to seconds.\n *\n * @description\n * Convert a number of hours to a full number of seconds.\n *\n * @param {number} hours - number of hours to be converted\n *\n * @returns {number} the number of hours converted in seconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 hours to seconds:\n * const result = hoursToSeconds(2)\n * //=> 7200\n */\n\nexport default function hoursToSeconds(hours) {\n  requiredArgs(1, arguments);\n  return Math.floor(hours * secondsInHour);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\n\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}","import subDays from \"../subDays/index.js\";\nimport subMonths from \"../subMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name sub\n * @category Common Helpers\n * @summary Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @description\n * Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be subtracted\n *\n * | Key     | Description                        |\n * |---------|------------------------------------|\n * | years   | Amount of years to be subtracted   |\n * | months  | Amount of months to be subtracted  |\n * | weeks   | Amount of weeks to be subtracted   |\n * | days    | Amount of days to be subtracted    |\n * | hours   | Amount of hours to be subtracted   |\n * | minutes | Amount of minutes to be subtracted |\n * | seconds | Amount of seconds to be subtracted |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract the following duration from 15 June 2017 15:29:20\n * const result = sub(new Date(2017, 5, 15, 15, 29, 20), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> Mon Sep 1 2014 10:19:50\n */\n\nexport default function sub(date, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || typeof duration !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0; // Subtract years and months\n\n  var dateWithoutMonths = subMonths(date, months + years * 12); // Subtract weeks and days\n\n  var dateWithoutDays = subDays(dateWithoutMonths, days + weeks * 7); // Subtract hours, minutes and seconds\n\n  var minutestoSub = minutes + hours * 60;\n  var secondstoSub = seconds + minutestoSub * 60;\n  var mstoSub = secondstoSub * 1000;\n  var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);\n  return finalDate;\n}","import compareAsc from \"../compareAsc/index.js\";\nimport differenceInYears from \"../differenceInYears/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInDays from \"../differenceInDays/index.js\";\nimport differenceInHours from \"../differenceInHours/index.js\";\nimport differenceInMinutes from \"../differenceInMinutes/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport sub from \"../sub/index.js\";\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @param {Interval} interval - the interval to convert to duration\n *\n * @returns {Duration} The duration Object\n * @throws {TypeError} Requires 2 arguments\n * @throws {RangeError} `start` must not be Invalid Date\n * @throws {RangeError} `end` must not be Invalid Date\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport default function intervalToDuration(_ref) {\n  var start = _ref.start,\n      end = _ref.end;\n  requiredArgs(1, arguments);\n  var dateLeft = toDate(start);\n  var dateRight = toDate(end);\n\n  if (!isValid(dateLeft)) {\n    throw new RangeError('Start Date is invalid');\n  }\n\n  if (!isValid(dateRight)) {\n    throw new RangeError('End Date is invalid');\n  }\n\n  var duration = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  };\n  var sign = compareAsc(dateLeft, dateRight);\n  duration.years = Math.abs(differenceInYears(dateLeft, dateRight));\n  var remainingMonths = sub(dateLeft, {\n    years: sign * duration.years\n  });\n  duration.months = Math.abs(differenceInMonths(remainingMonths, dateRight));\n  var remainingDays = sub(remainingMonths, {\n    months: sign * duration.months\n  });\n  duration.days = Math.abs(differenceInDays(remainingDays, dateRight));\n  var remainingHours = sub(remainingDays, {\n    days: sign * duration.days\n  });\n  duration.hours = Math.abs(differenceInHours(remainingHours, dateRight));\n  var remainingMinutes = sub(remainingHours, {\n    hours: sign * duration.hours\n  });\n  duration.minutes = Math.abs(differenceInMinutes(remainingMinutes, dateRight));\n  var remainingSeconds = sub(remainingMinutes, {\n    minutes: sign * duration.minutes\n  });\n  duration.seconds = Math.abs(differenceInSeconds(remainingSeconds, dateRight));\n  return duration;\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name intlFormat\n * @category Common Helpers\n * @summary  Format the date with Intl.DateTimeFormat (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat).\n *\n * @description\n * Return the formatted date string in the given format.\n * The method uses [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) inside.\n * formatOptions are the same as [`Intl.DateTimeFormat` options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat#using_options)\n *\n * > ⚠️ Please note that before Node version 13.0.0, only the locale data for en-US is available by default.\n *\n * @param {Date|Number} argument - the original date.\n * @param {Object} [formatOptions] - an object with options.\n * @param {'lookup'|'best fit'} [formatOptions.localeMatcher='best fit'] - locale selection algorithm.\n * @param {'narrow'|'short'|'long'} [formatOptions.weekday] - representation the days of the week.\n * @param {'narrow'|'short'|'long'} [formatOptions.era] - representation of eras.\n * @param {'numeric'|'2-digit'} [formatOptions.year] - representation of years.\n * @param {'numeric'|'2-digit'|'narrow'|'short'|'long'} [formatOptions.month='numeric'] - representation of month.\n * @param {'numeric'|'2-digit'} [formatOptions.day='numeric'] - representation of day.\n * @param {'numeric'|'2-digit'} [formatOptions.hour='numeric'] - representation of hours.\n * @param {'numeric'|'2-digit'} [formatOptions.minute] - representation of minutes.\n * @param {'numeric'|'2-digit'} [formatOptions.second] - representation of seconds.\n * @param {'short'|'long'} [formatOptions.timeZoneName] - representation of names of time zones.\n * @param {'basic'|'best fit'} [formatOptions.formatMatcher='best fit'] - format selection algorithm.\n * @param {Boolean} [formatOptions.hour12] - determines whether to use 12-hour time format.\n * @param {String} [formatOptions.timeZone] - the time zone to use.\n * @param {Object} [localeOptions] - an object with locale.\n * @param {String|String[]} [localeOptions.locale] - the locale code\n * @returns {String} the formatted date string.\n * @throws {TypeError} 1 argument required.\n * @throws {RangeError} `date` must not be Invalid Date\n *\n * @example\n * // Represent 10 October 2019 in German.\n * // Convert the date with format's options and locale's options.\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {\n *      weekday: 'long',\n *      year: 'numeric',\n *      month: 'long',\n *      day: 'numeric',\n *    }, {\n *      locale: 'de-DE',\n *  })\n * //=> Freitag, 4. Oktober 2019\n *\n * @example\n * // Represent 10 October 2019.\n * // Convert the date with format's options.\n * const result = intlFormat.default(new Date(2019, 9, 4, 12, 30, 13, 456), {\n *      year: 'numeric',\n *      month: 'numeric',\n *      day: 'numeric',\n *      hour: 'numeric',\n *  })\n * //=> 10/4/2019, 12 PM\n *\n * @example\n * // Represent 10 October 2019 in Korean.\n * // Convert the date with locale's options.\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {\n *      locale: 'ko-KR',\n *  })\n * //=> 2019. 10. 4.\n *\n * @example\n * // Represent 10 October 2019 in middle-endian format:\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456))\n * //=> 10/4/2019\n */\nexport default function intlFormat(date, formatOrLocale, localeOptions) {\n  var _localeOptions;\n\n  requiredArgs(1, arguments);\n  var formatOptions;\n\n  if (isFormatOptions(formatOrLocale)) {\n    formatOptions = formatOrLocale;\n  } else {\n    localeOptions = formatOrLocale;\n  }\n\n  return new Intl.DateTimeFormat((_localeOptions = localeOptions) === null || _localeOptions === void 0 ? void 0 : _localeOptions.locale, formatOptions).format(date);\n}\n\nfunction isFormatOptions(opts) {\n  return opts !== undefined && !('locale' in opts);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be after the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\n\nexport default function isAfter(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() > dateToCompare.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\nexport default function isBefore(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Boolean} the dates are equal\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * var result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0),\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */\n\nexport default function isEqual(dirtyLeftDate, dirtyRightDate) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyLeftDate);\n  var dateRight = toDate(dirtyRightDate);\n  return dateLeft.getTime() === dateRight.getTime();\n}","/**\n * @name isExists\n * @category Common Helpers\n * @summary Is the given date exists?\n *\n * @description\n * Checks if the given arguments convert to an existing date.\n *\n * @param {Number} year of the date to check\n * @param {Number} month of the date to check\n * @param {Number} day of the date to check\n * @returns {Boolean} the date exists\n * @throws {TypeError} 3 arguments required\n *\n * @example\n * // For the valid date:\n * var result = isExists(2018, 0, 31)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isExists(2018, 1, 31)\n * //=> false\n */\nexport default function isExists(year, month, day) {\n  if (arguments.length < 3) {\n    throw new TypeError('3 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = new Date(year, month, day);\n  return date.getFullYear() === year && date.getMonth() === month && date.getDate() === day;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isFirstDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the first day of a month?\n *\n * @description\n * Is the given date the first day of a month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the first day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 1 September 2014 the first day of a month?\n * var result = isFirstDayOfMonth(new Date(2014, 8, 1))\n * //=> true\n */\n\nexport default function isFirstDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDate() === 1;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isFriday\n * @category Weekday Helpers\n * @summary Is the given date Friday?\n *\n * @description\n * Is the given date Friday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Friday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 26 September 2014 Friday?\n * var result = isFriday(new Date(2014, 8, 26))\n * //=> true\n */\n\nexport default function isFriday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 5;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isFuture\n * @category Common Helpers\n * @summary Is the given date in the future?\n * @pure false\n *\n * @description\n * Is the given date in the future?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the future\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 31 December 2014 in the future?\n * var result = isFuture(new Date(2014, 11, 31))\n * //=> true\n */\n\nexport default function isFuture(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getTime() > Date.now();\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISODay(dirtyDate, dirtyDay) {\n  requiredArgs(2, arguments);\n  var day = toInteger(dirtyDay);\n\n  if (day % 7 === 0) {\n    day = day - 7;\n  }\n\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport getUTCISOWeek from \"../getUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISOWeek(dirtyDate, dirtyISOWeek) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getUTCISOWeek(date) - isoWeek;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport getUTCWeek from \"../getUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCWeek(dirtyDate, dirtyWeek, options) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getUTCWeek(date, options) - week;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport setUTCDay from \"../../../_lib/setUTCDay/index.js\";\nimport setUTCISODay from \"../../../_lib/setUTCISODay/index.js\";\nimport setUTCISOWeek from \"../../../_lib/setUTCISOWeek/index.js\";\nimport setUTCWeek from \"../../../_lib/setUTCWeek/index.js\";\nimport startOfUTCISOWeek from \"../../../_lib/startOfUTCISOWeek/index.js\";\nimport startOfUTCWeek from \"../../../_lib/startOfUTCWeek/index.js\";\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_SECOND = 1000;\nvar numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/,\n  // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/,\n  // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/,\n  // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/,\n  // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/,\n  // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/,\n  // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  minute: /^[0-5]?\\d/,\n  // 0 to 59\n  second: /^[0-5]?\\d/,\n  // 0 to 59\n  singleDigit: /^\\d/,\n  // 0 to 9\n  twoDigits: /^\\d{1,2}/,\n  // 0 to 99\n  threeDigits: /^\\d{1,3}/,\n  // 0 to 999\n  fourDigits: /^\\d{1,4}/,\n  // 0 to 9999\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/,\n  // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/,\n  // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/,\n  // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n\n};\nvar timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n};\n\nfunction parseNumericPattern(pattern, string, valueCallback) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  var value = parseInt(matchResult[0], 10);\n  return {\n    value: valueCallback ? valueCallback(value) : value,\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseTimezonePattern(pattern, string) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  } // Input is 'Z'\n\n\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: string.slice(1)\n    };\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseAnyDigitsSigned(string, valueCallback) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);\n}\n\nfunction parseNDigits(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction parseNDigitsSigned(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction dayPeriodEnumToHours(enumValue) {\n  switch (enumValue) {\n    case 'morning':\n      return 4;\n\n    case 'evening':\n      return 17;\n\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12;\n\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0; // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  var result;\n\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n\n\nvar parsers = {\n  // Era\n  G: {\n    priority: 140,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // AD, BC\n        case 'G':\n        case 'GG':\n        case 'GGG':\n          return match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n        // A, B\n\n        case 'GGGGG':\n          return match.era(string, {\n            width: 'narrow'\n          });\n        // Anno Domini, Before Christ\n\n        case 'GGGG':\n        default:\n          return match.era(string, {\n            width: 'wide'\n          }) || match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n      }\n    },\n    set: function (date, flags, value, _options) {\n      flags.era = value;\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['R', 'u', 't', 'T']\n  },\n  // Year\n  y: {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'yy'\n        };\n      };\n\n      switch (token) {\n        case 'y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, _options) {\n      var currentYear = date.getUTCFullYear();\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week-numbering year\n  Y: {\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'YY'\n        };\n      };\n\n      switch (token) {\n        case 'Y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'Yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, options) {\n      var currentYear = getUTCWeekYear(date, options);\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n        date.setUTCHours(0, 0, 0, 0);\n        return startOfUTCWeek(date, options);\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n      date.setUTCHours(0, 0, 0, 0);\n      return startOfUTCWeek(date, options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week-numbering year\n  R: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'R') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (_date, _flags, value, _options) {\n      var firstWeekOfYear = new Date(0);\n      firstWeekOfYear.setUTCFullYear(value, 0, 4);\n      firstWeekOfYear.setUTCHours(0, 0, 0, 0);\n      return startOfUTCISOWeek(firstWeekOfYear);\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Extended year\n  u: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'u') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Quarter\n  Q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'Q':\n        case 'QQ':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'Qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'QQQ':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'QQQQQ':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'QQQQ':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone quarter\n  q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'q':\n        case 'qq':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'qqq':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'qqqqq':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'qqqq':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Month\n  M: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'M':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'MM':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Mo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'MMM':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // J, F, ..., D\n\n        case 'MMMMM':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // January, February, ..., December\n\n        case 'MMMM':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone month\n  L: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'L':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'LL':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Lo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'LLL':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // J, F, ..., D\n\n        case 'LLLLL':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // January, February, ..., December\n\n        case 'LLLL':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week of year\n  w: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'w':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'wo':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCWeek(setUTCWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week of year\n  I: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'I':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'Io':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Day of the month\n  d: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'd':\n          return parseNumericPattern(numericPatterns.date, string);\n\n        case 'do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n      var month = date.getUTCMonth();\n\n      if (isLeapYear) {\n        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n      } else {\n        return value >= 1 && value <= DAYS_IN_MONTH[month];\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCDate(value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of year\n  D: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'D':\n        case 'DD':\n          return parseNumericPattern(numericPatterns.dayOfYear, string);\n\n        case 'Do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n\n      if (isLeapYear) {\n        return value >= 1 && value <= 366;\n      } else {\n        return value >= 1 && value <= 365;\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(0, value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of week\n  E: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // Tue\n        case 'E':\n        case 'EE':\n        case 'EEE':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'EEEEE':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'EEEEEE':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'EEEE':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local day of week\n  e: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'e':\n        case 'ee':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'eo':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'eee':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'eeeee':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'eeeeee':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'eeee':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']\n  },\n  // Stand-alone local day of week\n  c: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'c':\n        case 'cc':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'co':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'ccc':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // T\n\n        case 'ccccc':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tu\n\n        case 'cccccc':\n          return match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tuesday\n\n        case 'cccc':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']\n  },\n  // ISO day of week\n  i: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        if (value === 0) {\n          return 7;\n        }\n\n        return value;\n      };\n\n      switch (token) {\n        // 2\n        case 'i':\n        case 'ii':\n          // 02\n          return parseNDigits(token.length, string);\n        // 2nd\n\n        case 'io':\n          return match.ordinalNumber(string, {\n            unit: 'day'\n          });\n        // Tue\n\n        case 'iii':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // T\n\n        case 'iiiii':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tu\n\n        case 'iiiiii':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tuesday\n\n        case 'iiii':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 7;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCISODay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']\n  },\n  // AM or PM\n  a: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaaa':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaa':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['b', 'B', 'H', 'K', 'k', 't', 'T']\n  },\n  // AM, PM, midnight\n  b: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'b':\n        case 'bb':\n        case 'bbb':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbbb':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbb':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'B', 'H', 'K', 'k', 't', 'T']\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'B':\n        case 'BB':\n        case 'BBB':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBBB':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBB':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 't', 'T']\n  },\n  // Hour [1-12]\n  h: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'h':\n          return parseNumericPattern(numericPatterns.hour12h, string);\n\n        case 'ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 12;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else if (!isPM && value === 12) {\n        date.setUTCHours(0, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['H', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-23]\n  H: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'H':\n          return parseNumericPattern(numericPatterns.hour23h, string);\n\n        case 'Ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 23;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(value, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-11]\n  K: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'K':\n          return parseNumericPattern(numericPatterns.hour11h, string);\n\n        case 'Ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'k', 't', 'T']\n  },\n  // Hour [1-24]\n  k: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'k':\n          return parseNumericPattern(numericPatterns.hour24h, string);\n\n        case 'ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 24;\n    },\n    set: function (date, _flags, value, _options) {\n      var hours = value <= 24 ? value % 24 : value;\n      date.setUTCHours(hours, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']\n  },\n  // Minute\n  m: {\n    priority: 60,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'm':\n          return parseNumericPattern(numericPatterns.minute, string);\n\n        case 'mo':\n          return match.ordinalNumber(string, {\n            unit: 'minute'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMinutes(value, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Second\n  s: {\n    priority: 50,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 's':\n          return parseNumericPattern(numericPatterns.second, string);\n\n        case 'so':\n          return match.ordinalNumber(string, {\n            unit: 'second'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCSeconds(value, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Fraction of second\n  S: {\n    priority: 30,\n    parse: function (string, token, _match, _options) {\n      var valueCallback = function (value) {\n        return Math.floor(value * Math.pow(10, -token.length + 3));\n      };\n\n      return parseNDigits(token.length, string, valueCallback);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMilliseconds(value);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Timezone (ISO-8601. +00:00 is `'Z'`)\n  X: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'X':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'XX':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'XXXX':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'XXXXX':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'XXX':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'x']\n  },\n  // Timezone (ISO-8601)\n  x: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'x':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'xx':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'xxxx':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'xxxxx':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'xxx':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'X']\n  },\n  // Seconds timestamp\n  t: {\n    priority: 40,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value * 1000), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  },\n  // Milliseconds timestamp\n  T: {\n    priority: 20,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  }\n};\nexport default parsers;","import defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport assign from \"../_lib/assign/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport parsers from \"./_lib/parsers/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar notWhitespaceRegExp = /\\S/;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Old `parse` was renamed to `toDate`.\n *   Now `parse` is a new function which parses a string using a provided format.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward (toDate no longer accepts a string)\n *   toDate(1392098430000) // Unix to timestamp\n *   toDate(new Date(2014, 1, 11, 11, 30, 30)) // Cloning the date\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\n *   ```\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|Number} referenceDate - defines values missing from the parsed dateString\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\n\nexport default function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {\n  requiredArgs(3, arguments);\n  var dateString = String(dirtyDateString);\n  var formatString = String(dirtyFormatString);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property');\n  }\n\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyReferenceDate);\n    } else {\n      return new Date(NaN);\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale\n  }; // If timezone isn't specified, it will be set to the system timezone\n\n  var setters = [{\n    priority: TIMEZONE_UNIT_PRIORITY,\n    subPriority: -1,\n    set: dateToSystemTimezone,\n    index: 0\n  }];\n  var i;\n  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, subFnOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp);\n  var usedTokens = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    var firstCharacter = token[0];\n    var parser = parsers[firstCharacter];\n\n    if (parser) {\n      var incompatibleTokens = parser.incompatibleTokens;\n\n      if (Array.isArray(incompatibleTokens)) {\n        var incompatibleToken = void 0;\n\n        for (var _i = 0; _i < usedTokens.length; _i++) {\n          var usedToken = usedTokens[_i].token;\n\n          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {\n            incompatibleToken = usedTokens[_i];\n            break;\n          }\n        }\n\n        if (incompatibleToken) {\n          throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken.fullToken, \"` and `\").concat(token, \"` at the same time\"));\n        }\n      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {\n        throw new RangeError(\"The format string mustn't contain `\".concat(token, \"` and any other token at the same time\"));\n      }\n\n      usedTokens.push({\n        token: firstCharacter,\n        fullToken: token\n      });\n      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);\n\n      if (!parseResult) {\n        return new Date(NaN);\n      }\n\n      setters.push({\n        priority: parser.priority,\n        subPriority: parser.subPriority || 0,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      });\n      dateString = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n      } // Replace two single quote characters with one single quote character\n\n\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      } // Cut token from string, or, if string doesn't match the token, return Invalid Date\n\n\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length);\n      } else {\n        return new Date(NaN);\n      }\n    }\n  } // Check if the remaining input contains something other than whitespace\n\n\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN);\n  }\n\n  var uniquePrioritySetters = setters.map(function (setter) {\n    return setter.priority;\n  }).sort(function (a, b) {\n    return b - a;\n  }).filter(function (priority, index, array) {\n    return array.indexOf(priority) === index;\n  }).map(function (priority) {\n    return setters.filter(function (setter) {\n      return setter.priority === priority;\n    }).sort(function (a, b) {\n      return b.subPriority - a.subPriority;\n    });\n  }).map(function (setterArray) {\n    return setterArray[0];\n  });\n  var date = toDate(dirtyReferenceDate);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var flags = {};\n\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i];\n\n    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\n      return new Date(NaN);\n    }\n\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\n\n    if (result[0]) {\n      utcDate = result[0];\n      assign(flags, result[1]); // Result is date\n    } else {\n      utcDate = result;\n    }\n  }\n\n  return utcDate;\n}\n\nfunction dateToSystemTimezone(date, flags) {\n  if (flags.timestampIsSet) {\n    return date;\n  }\n\n  var convertedDate = new Date(0);\n  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  return convertedDate;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import parse from \"../parse/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name isMatch\n * @category Common Helpers\n * @summary validates the date string against given formats\n *\n * @description\n * Return the true if given date is string correct against the given format else\n * will return false.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * isMatch('23 AM', 'HH a')\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `isMatch` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `isMatch` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `isMatch` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `isMatch('50', 'yy') //=> true`\n *\n *    `isMatch('75', 'yy') //=> true`\n *\n *    while `uu` will use the year as is:\n *\n *    `isMatch('50', 'uu') //=> true`\n *\n *    `isMatch('75', 'uu') //=> true`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be checked in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are matched (e.g. when matching string 'January 1st' without a year),\n * the values will be taken from today's using `new Date()` date which works as a context of parsing.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n *\n *\n * @param {String} dateString - the date string to verify\n * @param {String} formatString - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Boolean}\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Match 11 February 2014 from middle-endian format:\n * var result = isMatch('02/11/2014', 'MM/dd/yyyy')\n * //=> true\n *\n * @example\n * // Match 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = isMatch('28-a de februaro', \"do 'de' MMMM\", {\n *   locale: eo\n * })\n * //=> true\n */\nexport default function isMatch(dateString, formatString, options) {\n  requiredArgs(2, arguments);\n  return isValid(parse(dateString, formatString, new Date(), options));\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isMonday\n * @category Weekday Helpers\n * @summary Is the given date Monday?\n *\n * @description\n * Is the given date Monday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Monday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 22 September 2014 Monday?\n * var result = isMonday(new Date(2014, 8, 22))\n * //=> true\n */\n\nexport default function isMonday(date) {\n  requiredArgs(1, arguments);\n  return toDate(date).getDay() === 1;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isPast\n * @category Common Helpers\n * @summary Is the given date in the past?\n * @pure false\n *\n * @description\n * Is the given date in the past?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the past\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 2 July 2014 in the past?\n * var result = isPast(new Date(2014, 6, 2))\n * //=> true\n */\n\nexport default function isPast(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getTime() < Date.now();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * const result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\n\nexport default function startOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(0, 0, 0);\n  return date;\n}","import startOfHour from \"../startOfHour/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameHour\n * @category Hour Helpers\n * @summary Are the given dates in the same hour?\n *\n * @description\n * Are the given dates in the same hour?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same hour\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 2014 06:00:00 and 4 September 06:30:00 in the same hour?\n * var result = isSameHour(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 6, 30))\n * //=> true\n */\n\nexport default function isSameHour(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfHour = startOfHour(dirtyDateLeft);\n  var dateRightStartOfHour = startOfHour(dirtyDateRight);\n  return dateLeftStartOfHour.getTime() === dateRightStartOfHour.getTime();\n}","import startOfWeek from \"../startOfWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name isSameWeek\n * @category Week Helpers\n * @summary Are the given dates in the same week?\n *\n * @description\n * Are the given dates in the same week?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Boolean} the dates are in the same week\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // Are 31 August 2014 and 4 September 2014 in the same week?\n * var result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))\n * //=> true\n *\n * @example\n * // If week starts with Monday,\n * // are 31 August 2014 and 4 September 2014 in the same week?\n * var result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {\n *   weekStartsOn: 1\n * })\n * //=> false\n */\nexport default function isSameWeek(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfWeek = startOfWeek(dirtyDateLeft, dirtyOptions);\n  var dateRightStartOfWeek = startOfWeek(dirtyDateRight, dirtyOptions);\n  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();\n}","import isSameWeek from \"../isSameWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameISOWeek\n * @category ISO Week Helpers\n * @summary Are the given dates in the same ISO week?\n *\n * @description\n * Are the given dates in the same ISO week?\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same ISO week\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 1 September 2014 and 7 September 2014 in the same ISO week?\n * var result = isSameISOWeek(new Date(2014, 8, 1), new Date(2014, 8, 7))\n * //=> true\n */\n\nexport default function isSameISOWeek(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  return isSameWeek(dirtyDateLeft, dirtyDateRight, {\n    weekStartsOn: 1\n  });\n}","import startOfISOWeekYear from \"../startOfISOWeekYear/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Are the given dates in the same ISO week-numbering year?\n *\n * @description\n * Are the given dates in the same ISO week-numbering year?\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `isSameISOYear` to `isSameISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `getWeekYear`.\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same ISO week-numbering year\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?\n * var result = isSameISOWeekYear(new Date(2003, 11, 29), new Date(2005, 0, 2))\n * //=> true\n */\n\nexport default function isSameISOWeekYear(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfYear = startOfISOWeekYear(dirtyDateLeft);\n  var dateRightStartOfYear = startOfISOWeekYear(dirtyDateRight);\n  return dateLeftStartOfYear.getTime() === dateRightStartOfYear.getTime();\n}","import startOfMinute from \"../startOfMinute/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameMinute\n * @category Minute Helpers\n * @summary Are the given dates in the same minute?\n *\n * @description\n * Are the given dates in the same minute?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same minute\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 2014 06:30:00 and 4 September 2014 06:30:15\n * // in the same minute?\n * var result = isSameMinute(\n *   new Date(2014, 8, 4, 6, 30),\n *   new Date(2014, 8, 4, 6, 30, 15)\n * )\n * //=> true\n */\n\nexport default function isSameMinute(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfMinute = startOfMinute(dirtyDateLeft);\n  var dateRightStartOfMinute = startOfMinute(dirtyDateRight);\n  return dateLeftStartOfMinute.getTime() === dateRightStartOfMinute.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameMonth\n * @category Month Helpers\n * @summary Are the given dates in the same month?\n *\n * @description\n * Are the given dates in the same month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same month\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same month?\n * var result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isSameMonth(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();\n}","import startOfQuarter from \"../startOfQuarter/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameQuarter\n * @category Quarter Helpers\n * @summary Are the given dates in the same year quarter?\n *\n * @description\n * Are the given dates in the same year quarter?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same quarter\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 1 January 2014 and 8 March 2014 in the same quarter?\n * var result = isSameQuarter(new Date(2014, 0, 1), new Date(2014, 2, 8))\n * //=> true\n */\n\nexport default function isSameQuarter(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfQuarter = startOfQuarter(dirtyDateLeft);\n  var dateRightStartOfQuarter = startOfQuarter(dirtyDateRight);\n  return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfSecond\n * @category Second Helpers\n * @summary Return the start of a second for the given date.\n *\n * @description\n * Return the start of a second for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a second\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a second for 1 December 2014 22:15:45.400:\n * const result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.000\n */\n\nexport default function startOfSecond(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMilliseconds(0);\n  return date;\n}","import startOfSecond from \"../startOfSecond/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameSecond\n * @category Second Helpers\n * @summary Are the given dates in the same second?\n *\n * @description\n * Are the given dates in the same second?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same second\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 2014 06:30:15.000 and 4 September 2014 06:30.15.500\n * // in the same second?\n * var result = isSameSecond(\n *   new Date(2014, 8, 4, 6, 30, 15),\n *   new Date(2014, 8, 4, 6, 30, 15, 500)\n * )\n * //=> true\n */\n\nexport default function isSameSecond(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfSecond = startOfSecond(dirtyDateLeft);\n  var dateRightStartOfSecond = startOfSecond(dirtyDateRight);\n  return dateLeftStartOfSecond.getTime() === dateRightStartOfSecond.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameYear\n * @category Year Helpers\n * @summary Are the given dates in the same year?\n *\n * @description\n * Are the given dates in the same year?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same year\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same year?\n * var result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isSameYear(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear();\n}","import isSameHour from \"../isSameHour/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThisHour\n * @category Hour Helpers\n * @summary Is the given date in the same hour as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same hour as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If now is 25 September 2014 18:30:15.500,\n * // is 25 September 2014 18:00:00 in this hour?\n * var result = isThisHour(new Date(2014, 8, 25, 18))\n * //=> true\n */\n\nexport default function isThisHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameHour(Date.now(), dirtyDate);\n}","import isSameISOWeek from \"../isSameISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThisISOWeek\n * @category ISO Week Helpers\n * @summary Is the given date in the same ISO week as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same ISO week as the current date?\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 22 September 2014 in this ISO week?\n * var result = isThisISOWeek(new Date(2014, 8, 22))\n * //=> true\n */\n\nexport default function isThisISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameISOWeek(dirtyDate, Date.now());\n}","import isSameMinute from \"../isSameMinute/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThisMinute\n * @category Minute Helpers\n * @summary Is the given date in the same minute as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same minute as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If now is 25 September 2014 18:30:15.500,\n * // is 25 September 2014 18:30:00 in this minute?\n * var result = isThisMinute(new Date(2014, 8, 25, 18, 30))\n * //=> true\n */\n\nexport default function isThisMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameMinute(Date.now(), dirtyDate);\n}","import isSameMonth from \"../isSameMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThisMonth\n * @category Month Helpers\n * @summary Is the given date in the same month as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same month as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 15 September 2014 in this month?\n * var result = isThisMonth(new Date(2014, 8, 15))\n * //=> true\n */\n\nexport default function isThisMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameMonth(Date.now(), dirtyDate);\n}","import isSameQuarter from \"../isSameQuarter/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThisQuarter\n * @category Quarter Helpers\n * @summary Is the given date in the same quarter as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same quarter as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 2 July 2014 in this quarter?\n * var result = isThisQuarter(new Date(2014, 6, 2))\n * //=> true\n */\n\nexport default function isThisQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameQuarter(Date.now(), dirtyDate);\n}","import isSameSecond from \"../isSameSecond/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThisSecond\n * @category Second Helpers\n * @summary Is the given date in the same second as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same second as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this second\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If now is 25 September 2014 18:30:15.500,\n * // is 25 September 2014 18:30:15.000 in this second?\n * var result = isThisSecond(new Date(2014, 8, 25, 18, 30, 15))\n * //=> true\n */\n\nexport default function isThisSecond(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameSecond(Date.now(), dirtyDate);\n}","import isSameWeek from \"../isSameWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name isThisWeek\n * @category Week Helpers\n * @summary Is the given date in the same week as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same week as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @param {Object} [options] - the object with options\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Boolean} the date is in this week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // If today is 25 September 2014, is 21 September 2014 in this week?\n * var result = isThisWeek(new Date(2014, 8, 21))\n * //=> true\n *\n * @example\n * // If today is 25 September 2014 and week starts with Monday\n * // is 21 September 2014 in this week?\n * var result = isThisWeek(new Date(2014, 8, 21), { weekStartsOn: 1 })\n * //=> false\n */\nexport default function isThisWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  return isSameWeek(dirtyDate, Date.now(), options);\n}","import isSameYear from \"../isSameYear/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThisYear\n * @category Year Helpers\n * @summary Is the given date in the same year as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same year as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 2 July 2014 in this year?\n * var result = isThisYear(new Date(2014, 6, 2))\n * //=> true\n */\n\nexport default function isThisYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameYear(dirtyDate, Date.now());\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThursday\n * @category Weekday Helpers\n * @summary Is the given date Thursday?\n *\n * @description\n * Is the given date Thursday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Thursday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 25 September 2014 Thursday?\n * var result = isThursday(new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isThursday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 4;\n}","import isSameDay from \"../isSameDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is today\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * var result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\n\nexport default function isToday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, Date.now());\n}","import addDays from \"../addDays/index.js\";\nimport isSameDay from \"../isSameDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isTomorrow\n * @category Day Helpers\n * @summary Is the given date tomorrow?\n * @pure false\n *\n * @description\n * Is the given date tomorrow?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is tomorrow\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 7 October 14:00:00 tomorrow?\n * var result = isTomorrow(new Date(2014, 9, 7, 14, 0))\n * //=> true\n */\n\nexport default function isTomorrow(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, addDays(Date.now(), 1));\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isTuesday\n * @category Weekday Helpers\n * @summary Is the given date Tuesday?\n *\n * @description\n * Is the given date Tuesday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Tuesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 23 September 2014 Tuesday?\n * var result = isTuesday(new Date(2014, 8, 23))\n * //=> true\n */\n\nexport default function isTuesday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 2;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isWednesday\n * @category Weekday Helpers\n * @summary Is the given date Wednesday?\n *\n * @description\n * Is the given date Wednesday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Wednesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 24 September 2014 Wednesday?\n * const result = isWednesday(new Date(2014, 8, 24))\n * //=> true\n */\n\nexport default function isWednesday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 3;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `isWithinRange` to `isWithinInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   isWithinRange(\n *     new Date(2014, 0, 3),\n *     new Date(2014, 0, 1), new Date(2014, 0, 7)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   isWithinInterval(\n *     new Date(2014, 0, 3),\n *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date to check\n * @param {Interval} interval - the interval to check\n * @returns {Boolean} the date is within the interval\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date }) // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end }) // => true\n */\nexport default function isWithinInterval(dirtyDate, interval) {\n  requiredArgs(2, arguments);\n  var time = toDate(dirtyDate).getTime();\n  var startTime = toDate(interval.start).getTime();\n  var endTime = toDate(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  return time >= startTime && time <= endTime;\n}","import isSameDay from \"../isSameDay/index.js\";\nimport subDays from \"../subDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isYesterday\n * @category Day Helpers\n * @summary Is the given date yesterday?\n * @pure false\n *\n * @description\n * Is the given date yesterday?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is yesterday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 5 October 14:00:00 yesterday?\n * var result = isYesterday(new Date(2014, 9, 5, 14, 0))\n * //=> true\n */\n\nexport default function isYesterday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, subDays(Date.now(), 1));\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name lastDayOfDecade\n * @category Decade Helpers\n * @summary Return the last day of a decade for the given date.\n *\n * @description\n * Return the last day of a decade for the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of a decade\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of a decade for 21 December 2012 21:12:00:\n * var result = lastDayOfDecade(new Date(2012, 11, 21, 21, 12, 00))\n * //=> Wed Dec 31 2019 00:00:00\n */\n\nexport default function lastDayOfDecade(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var decade = 9 + Math.floor(year / 10) * 10;\n  date.setFullYear(decade + 1, 0, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name lastDayOfWeek\n * @category Week Helpers\n * @summary Return the last day of a week for the given date.\n *\n * @description\n * Return the last day of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the last day of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The last day of a week for 2 September 2014 11:55:00:\n * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the last day of the week for 2 September 2014 11:55:00:\n * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport default function lastDayOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setHours(0, 0, 0, 0);\n  date.setDate(date.getDate() + diff);\n  return date;\n}","import lastDayOfWeek from \"../lastDayOfWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name lastDayOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the last day of an ISO week for the given date.\n *\n * @description\n * Return the last day of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of an ISO week for 2 September 2014 11:55:00:\n * var result = lastDayOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Sep 07 2014 00:00:00\n */\n\nexport default function lastDayOfISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return lastDayOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}","import getISOWeekYear from \"../getISOWeekYear/index.js\";\nimport startOfISOWeek from \"../startOfISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name lastDayOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the last day of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the last day of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `lastDayOfISOYear` to `lastDayOfISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `getWeekYear`.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of an ISO week-numbering year for 2 July 2005:\n * var result = lastDayOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Sun Jan 01 2006 00:00:00\n */\n\nexport default function lastDayOfISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setFullYear(year + 1, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  var date = startOfISOWeek(fourthOfJanuary);\n  date.setDate(date.getDate() - 1);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name lastDayOfQuarter\n * @category Quarter Helpers\n * @summary Return the last day of a year quarter for the given date.\n *\n * @description\n * Return the last day of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the last day of a quarter\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // The last day of a quarter for 2 September 2014 11:55:00:\n * var result = lastDayOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 00:00:00\n */\n\nexport default function lastDayOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3 + 3;\n  date.setMonth(month, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name lastDayOfYear\n * @category Year Helpers\n * @summary Return the last day of a year for the given date.\n *\n * @description\n * Return the last day of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of a year for 2 September 2014 11:55:00:\n * var result = lastDayOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Dec 31 2014 00:00:00\n */\n\nexport default function lastDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  date.setFullYear(year + 1, 0, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/lightFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name lightFormat\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. Unlike `format`,\n * `lightFormat` doesn't use locales and outputs date using the most popular tokens.\n *\n * > ⚠️ Please note that the `lightFormat` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   |\n * |---------------------------------|---------|-----------------------------------|\n * | AM, PM                          | a..aaa  | AM, PM                            |\n * |                                 | aaaa    | a.m., p.m.                        |\n * |                                 | aaaaa   | a, p                              |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 |\n * |                                 | yy      | 44, 01, 00, 17                    |\n * |                                 | yyy     | 044, 001, 000, 017                |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |\n * |                                 | MM      | 01, 02, ..., 12                   |\n * | Day of month                    | d       | 1, 2, ..., 31                     |\n * |                                 | dd      | 01, 02, ..., 31                   |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |\n * |                                 | hh      | 01, 02, ..., 11, 12               |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |\n * |                                 | HH      | 00, 01, 02, ..., 23               |\n * | Minute                          | m       | 0, 1, ..., 59                     |\n * |                                 | mm      | 00, 01, ..., 59                   |\n * | Second                          | s       | 0, 1, ..., 59                     |\n * |                                 | ss      | 00, 01, ..., 59                   |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |\n * |                                 | SS      | 00, 01, ..., 99                   |\n * |                                 | SSS     | 000, 0001, ..., 999               |\n * |                                 | SSSS    | ...                               |\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * const result = lightFormat(new Date(2014, 1, 11), 'yyyy-MM-dd')\n * //=> '2014-02-11'\n */\n\nexport default function lightFormat(dirtyDate, formatStr) {\n  requiredArgs(2, arguments);\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var tokens = formatStr.match(formattingTokensRegExp); // The only case when formattingTokensRegExp doesn't match the string is when it's empty\n\n  if (!tokens) return '';\n  var result = tokens.map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      return formatter(utcDate, substring);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  var matches = input.match(escapedStringRegExp);\n\n  if (!matches) {\n    return input;\n  }\n\n  return matches[1].replace(doubleQuoteRegExp, \"'\");\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n// Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n// 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\nvar daysInYear = 365.2425;\n/**\n * @name milliseconds\n * @category Millisecond Helpers\n * @summary\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\n *\n * @description\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n *\n * One month is a year divided by 12.\n *\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {number} the milliseconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // 1 year in milliseconds\n * milliseconds({ years: 1 })\n * //=> 31556952000\n *\n * // 3 months in milliseconds\n * milliseconds({ months: 3 })\n * //=> 7889238000\n */\n\nexport default function milliseconds(_ref) {\n  var years = _ref.years,\n      months = _ref.months,\n      weeks = _ref.weeks,\n      days = _ref.days,\n      hours = _ref.hours,\n      minutes = _ref.minutes,\n      seconds = _ref.seconds;\n  requiredArgs(1, arguments);\n  var totalDays = 0;\n  if (years) totalDays += years * daysInYear;\n  if (months) totalDays += months * (daysInYear / 12);\n  if (weeks) totalDays += weeks * 7;\n  if (days) totalDays += days;\n  var totalSeconds = totalDays * 24 * 60 * 60;\n  if (hours) totalSeconds += hours * 60 * 60;\n  if (minutes) totalSeconds += minutes * 60;\n  if (seconds) totalSeconds += seconds;\n  return Math.round(totalSeconds * 1000);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { millisecondsInHour } from \"../constants/index.js\";\n/**\n * @name millisecondsToHours\n * @category Conversion Helpers\n * @summary Convert milliseconds to hours.\n *\n * @description\n * Convert a number of milliseconds to a full number of hours.\n *\n * @param {number} milliseconds - number of milliseconds to be converted\n *\n * @returns {number} the number of milliseconds converted in hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 7200000 milliseconds to hours:\n * const result = millisecondsToHours(7200000)\n * //=> 2\n *\n * @example\n * // It uses floor rounding:\n * const result = millisecondsToHours(7199999)\n * //=> 1\n */\n\nexport default function millisecondsToHours(milliseconds) {\n  requiredArgs(1, arguments);\n  var hours = milliseconds / millisecondsInHour;\n  return Math.floor(hours);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { millisecondsInMinute } from \"../constants/index.js\";\n/**\n * @name millisecondsToMinutes\n * @category Conversion Helpers\n * @summary Convert milliseconds to minutes.\n *\n * @description\n * Convert a number of milliseconds to a full number of minutes.\n *\n * @param {number} milliseconds - number of milliseconds to be converted.\n *\n * @returns {number} the number of milliseconds converted in minutes\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 60000 milliseconds to minutes:\n * const result = millisecondsToMinutes(60000)\n * //=> 1\n *\n * @example\n * // It uses floor rounding:\n * const result = millisecondsToMinutes(119999)\n * //=> 1\n */\n\nexport default function millisecondsToMinutes(milliseconds) {\n  requiredArgs(1, arguments);\n  var minutes = milliseconds / millisecondsInMinute;\n  return Math.floor(minutes);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { millisecondsInSecond } from \"../constants/index.js\";\n/**\n * @name millisecondsToSeconds\n * @category Conversion Helpers\n * @summary Convert milliseconds to seconds.\n *\n * @description\n * Convert a number of milliseconds to a full number of seconds.\n *\n * @param {number} milliseconds - number of milliseconds to be converted\n *\n * @returns {number} the number of milliseconds converted in seconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 1000 miliseconds to seconds:\n * const result = millisecondsToSeconds(1000)\n * //=> 1\n *\n * @example\n * // It uses floor rounding:\n * const result = millisecondsToSeconds(1999)\n * //=> 1\n */\n\nexport default function millisecondsToSeconds(milliseconds) {\n  requiredArgs(1, arguments);\n  var seconds = milliseconds / millisecondsInSecond;\n  return Math.floor(seconds);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { minutesInHour } from \"../constants/index.js\";\n/**\n * @name minutesToHours\n * @category Conversion Helpers\n * @summary Convert minutes to hours.\n *\n * @description\n * Convert a number of minutes to a full number of hours.\n *\n * @param {number} minutes - number of minutes to be converted\n *\n * @returns {number} the number of minutes converted in hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 140 minutes to hours:\n * const result = minutesToHours(120)\n * //=> 2\n *\n * @example\n * // It uses floor rounding:\n * const result = minutesToHours(179)\n * //=> 2\n */\n\nexport default function minutesToHours(minutes) {\n  requiredArgs(1, arguments);\n  var hours = minutes / minutesInHour;\n  return Math.floor(hours);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { millisecondsInMinute } from \"../constants/index.js\";\n/**\n * @name minutesToMilliseconds\n * @category Conversion Helpers\n * @summary Convert minutes to milliseconds.\n *\n * @description\n * Convert a number of minutes to a full number of milliseconds.\n *\n * @param {number} minutes - number of minutes to be converted\n *\n * @returns {number} the number of minutes converted in milliseconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 minutes to milliseconds\n * const result = minutesToMilliseconds(2)\n * //=> 120000\n */\n\nexport default function minutesToMilliseconds(minutes) {\n  requiredArgs(1, arguments);\n  return Math.floor(minutes * millisecondsInMinute);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { secondsInMinute } from \"../constants/index.js\";\n/**\n * @name minutesToSeconds\n * @category Conversion Helpers\n * @summary Convert minutes to seconds.\n *\n * @description\n * Convert a number of minutes to a full number of seconds.\n *\n * @param { number } minutes - number of minutes to be converted\n *\n * @returns {number} the number of minutes converted in seconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 minutes to seconds\n * const result = minutesToSeconds(2)\n * //=> 120\n */\n\nexport default function minutesToSeconds(minutes) {\n  requiredArgs(1, arguments);\n  return Math.floor(minutes * secondsInMinute);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { monthsInQuarter } from \"../constants/index.js\";\n/**\n * @name monthsToQuarters\n * @category Conversion Helpers\n * @summary Convert number of months to quarters.\n *\n * @description\n * Convert a number of months to a full number of quarters.\n *\n * @param {number} months - number of months to be converted.\n *\n * @returns {number} the number of months converted in quarters\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 6 months to quarters:\n * const result = monthsToQuarters(6)\n * //=> 2\n *\n * @example\n * // It uses floor rounding:\n * const result = monthsToQuarters(7)\n * //=> 2\n */\n\nexport default function monthsToQuarters(months) {\n  requiredArgs(1, arguments);\n  var quarters = months / monthsInQuarter;\n  return Math.floor(quarters);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { monthsInYear } from \"../constants/index.js\";\n/**\n * @name monthsToYears\n * @category Conversion Helpers\n * @summary Convert number of months to years.\n *\n * @description\n * Convert a number of months to a full number of years.\n *\n * @param {number} months - number of months to be converted\n *\n * @returns {number} the number of months converted in years\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 36 months to years:\n * const result = monthsToYears(36)\n * //=> 3\n *\n * // It uses floor rounding:\n * const result = monthsToYears(40)\n * //=> 3\n */\n\nexport default function monthsToYears(months) {\n  requiredArgs(1, arguments);\n  var years = months / monthsInYear;\n  return Math.floor(years);\n}","import addDays from \"../addDays/index.js\";\nimport getDay from \"../getDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name nextDay\n * @category Weekday Helpers\n * @summary When is the next day of the week?\n *\n * @description\n * When is the next day of the week? 0-6 the day of the week, 0 represents Sunday.\n *\n * @param {Date | number} date - the date to check\n * @param {Day} day - day of the week\n * @returns {Date} - the date is the next day of week\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // When is the next Monday after Mar, 20, 2020?\n * const result = nextDay(new Date(2020, 2, 20), 1)\n * //=> Mon Mar 23 2020 00:00:00\n *\n * @example\n * // When is the next Tuesday after Mar, 21, 2020?\n * const result = nextDay(new Date(2020, 2, 21), 2)\n * //=> Tue Mar 24 2020 00:00:00\n */\n\nexport default function nextDay(date, day) {\n  requiredArgs(2, arguments);\n  var delta = day - getDay(date);\n  if (delta <= 0) delta += 7;\n  return addDays(date, delta);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport nextDay from \"../nextDay/index.js\";\nimport toDate from \"../toDate/index.js\";\n/**\n * @name nextFriday\n * @category Weekday Helpers\n * @summary When is the next Friday?\n *\n * @description\n * When is the next Friday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the next Friday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the next Friday after Mar, 22, 2020?\n * const result = nextFriday(new Date(2020, 2, 22))\n * //=> Fri Mar 27 2020 00:00:00\n */\n\nexport default function nextFriday(date) {\n  requiredArgs(1, arguments);\n  return nextDay(toDate(date), 5);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport nextDay from \"../nextDay/index.js\";\nimport toDate from \"../toDate/index.js\";\n/**\n * @name nextMonday\n * @category Weekday Helpers\n * @summary When is the next Monday?\n *\n * @description\n * When is the next Monday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the next Monday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the next Monday after Mar, 22, 2020?\n * const result = nextMonday(new Date(2020, 2, 22))\n * //=> Mon Mar 23 2020 00:00:00\n */\n\nexport default function nextMonday(date) {\n  requiredArgs(1, arguments);\n  return nextDay(toDate(date), 1);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport nextDay from \"../nextDay/index.js\";\nimport toDate from \"../toDate/index.js\";\n/**\n * @name nextSaturday\n * @category Weekday Helpers\n * @summary When is the next Saturday?\n *\n * @description\n * When is the next Saturday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the next Saturday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the next Saturday after Mar, 22, 2020?\n * const result = nextSaturday(new Date(2020, 2, 22))\n * //=> Sat Mar 28 2020 00:00:00\n */\n\nexport default function nextSaturday(date) {\n  requiredArgs(1, arguments);\n  return nextDay(toDate(date), 6);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport nextDay from \"../nextDay/index.js\";\nimport toDate from \"../toDate/index.js\";\n/**\n * @name nextSunday\n * @category Weekday Helpers\n * @summary When is the next Sunday?\n *\n * @description\n * When is the next Sunday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the next Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the next Sunday after Mar, 22, 2020?\n * const result = nextSunday(new Date(2020, 2, 22))\n * //=> Sun Mar 29 2020 00:00:00\n */\n\nexport default function nextSunday(date) {\n  requiredArgs(1, arguments);\n  return nextDay(toDate(date), 0);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport nextDay from \"../nextDay/index.js\";\nimport toDate from \"../toDate/index.js\";\n/**\n * @name nextThursday\n * @category Weekday Helpers\n * @summary When is the next Thursday?\n *\n * @description\n * When is the next Thursday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the next Thursday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the next Thursday after Mar, 22, 2020?\n * const result = nextThursday(new Date(2020, 2, 22))\n * //=> Thur Mar 26 2020 00:00:00\n */\n\nexport default function nextThursday(date) {\n  requiredArgs(1, arguments);\n  return nextDay(toDate(date), 4);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport nextDay from \"../nextDay/index.js\";\nimport toDate from \"../toDate/index.js\";\n/**\n * @name nextTuesday\n * @category Weekday Helpers\n * @summary When is the next Tuesday?\n *\n * @description\n * When is the next Tuesday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the next Tuesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the next Tuesday after Mar, 22, 2020?\n * const result = nextTuesday(new Date(2020, 2, 22))\n * //=> Tue Mar 24 2020 00:00:00\n */\n\nexport default function nextTuesday(date) {\n  requiredArgs(1, arguments);\n  return nextDay(toDate(date), 2);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport nextDay from \"../nextDay/index.js\";\nimport toDate from \"../toDate/index.js\";\n/**\n * @name nextWednesday\n * @category Weekday Helpers\n * @summary When is the next Wednesday?\n *\n * @description\n * When is the next Wednesday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the next Wednesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the next Wednesday after Mar, 22, 2020?\n * const result = nextWednesday(new Date(2020, 2, 22))\n * //=> Wed Mar 25 2020 00:00:00\n */\n\nexport default function nextWednesday(date) {\n  requiredArgs(1, arguments);\n  return nextDay(toDate(date), 3);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (isNaN(date) || !date) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time) || time === null) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(0);\n    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());\n    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: null\n  };\n  var year = captures[1] && parseInt(captures[1]);\n  var century = captures[2] && parseInt(captures[2]);\n  return {\n    year: century == null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return null;\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return null;\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return null; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name parseJSON\n * @category Common Helpers\n * @summary Parse a JSON date string\n *\n * @description\n * Converts a complete ISO date string in UTC time, the typical format for transmitting\n * a date in JSON, to a JavaScript `Date` instance.\n *\n * This is a minimal implementation for converting dates retrieved from a JSON API to\n * a `Date` instance which can be used with other functions in the `date-fns` library.\n * The following formats are supported:\n *\n * - `2000-03-15T05:20:10.123Z`: The output of `.toISOString()` and `JSON.stringify(new Date())`\n * - `2000-03-15T05:20:10Z`: Without milliseconds\n * - `2000-03-15T05:20:10+00:00`: With a zero offset, the default JSON encoded format in some other languages\n * - `2000-03-15T05:20:10+05:45`: With a positive or negative offset, the default JSON encoded format in some other languages\n * - `2000-03-15T05:20:10+0000`: With a zero offset without a colon\n * - `2000-03-15T05:20:10`: Without a trailing 'Z' symbol\n * - `2000-03-15T05:20:10.1234567`: Up to 7 digits in milliseconds field. Only first 3 are taken into account since JS does not allow fractional milliseconds\n * - `2000-03-15 05:20:10`: With a space instead of a 'T' separator for APIs returning a SQL date without reformatting\n *\n * For convenience and ease of use these other input types are also supported\n * via [toDate]{@link https://date-fns.org/docs/toDate}:\n *\n * - A `Date` instance will be cloned\n * - A `number` will be treated as a timestamp\n *\n * Any other input type or invalid date strings will return an `Invalid Date`.\n *\n * @param {String|Number|Date} argument A fully formed ISO8601 date string to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n */\n\nexport default function parseJSON(argument) {\n  requiredArgs(1, arguments);\n\n  if (typeof argument === 'string') {\n    var parts = argument.match(/(\\d{4})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{0,7}))?(?:Z|(.)(\\d{2}):?(\\d{2})?)?/);\n\n    if (parts) {\n      // Group 8 matches the sign\n      return new Date(Date.UTC(+parts[1], +parts[2] - 1, +parts[3], +parts[4] - (+parts[9] || 0) * (parts[8] == '-' ? -1 : 1), +parts[5] - (+parts[10] || 0) * (parts[8] == '-' ? -1 : 1), +parts[6], +((parts[7] || '0') + '00').substring(0, 3)));\n    }\n\n    return new Date(NaN);\n  }\n\n  return toDate(argument);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport getDay from \"../getDay/index.js\";\nimport subDays from \"../subDays/index.js\";\n\n/**\n * @name previousDay\n * @category Weekday Helpers\n * @summary When is the previous day of the week?\n *\n * @description\n * When is the previous day of the week? 0-6 the day of the week, 0 represents Sunday.\n *\n * @param {Date | number} date - the date to check\n * @param {number} day - day of the week\n * @returns {Date} - the date is the previous day of week\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // When is the previous Monday before Mar, 20, 2020?\n * const result = previousDay(new Date(2020, 2, 20), 1)\n * //=> Mon Mar 16 2020 00:00:00\n *\n * @example\n * // When is the previous Tuesday before Mar, 21, 2020?\n * const result = previousDay(new Date(2020, 2, 21), 2)\n * //=> Tue Mar 17 2020 00:00:00\n */\nexport default function previousDay(date, day) {\n  requiredArgs(2, arguments);\n  var delta = getDay(date) - day;\n  if (delta <= 0) delta += 7;\n  return subDays(date, delta);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport previousDay from \"../previousDay/index.js\";\n/**\n * @name previousFriday\n * @category Weekday Helpers\n * @summary When is the previous Friday?\n *\n * @description\n * When is the previous Friday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the previous Friday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the previous Friday before Jun, 19, 2021?\n * const result = previousFriday(new Date(2021, 5, 19))\n * //=> Fri June 18 2021 00:00:00\n */\n\nexport default function previousFriday(date) {\n  requiredArgs(1, arguments);\n  return previousDay(date, 5);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport previousDay from \"../previousDay/index.js\";\n/**\n * @name previousMonday\n * @category Weekday Helpers\n * @summary When is the previous Monday?\n *\n * @description\n * When is the previous Monday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the previous Monday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the previous Monday before Jun, 18, 2021?\n * const result = previousMonday(new Date(2021, 5, 18))\n * //=> Mon June 14 2021 00:00:00\n */\n\nexport default function previousMonday(date) {\n  requiredArgs(1, arguments);\n  return previousDay(date, 1);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport previousDay from \"../previousDay/index.js\";\n/**\n * @name previousSaturday\n * @category Weekday Helpers\n * @summary When is the previous Saturday?\n *\n * @description\n * When is the previous Saturday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the previous Saturday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the previous Saturday before Jun, 20, 2021?\n * const result = previousSaturday(new Date(2021, 5, 20))\n * //=> Sat June 19 2021 00:00:00\n */\n\nexport default function previousSaturday(date) {\n  requiredArgs(1, arguments);\n  return previousDay(date, 6);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport previousDay from \"../previousDay/index.js\";\n/**\n * @name previousSunday\n * @category Weekday Helpers\n * @summary When is the previous Sunday?\n *\n * @description\n * When is the previous Sunday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the previous Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the previous Sunday before Jun, 21, 2021?\n * const result = previousSunday(new Date(2021, 5, 21))\n * //=> Sun June 20 2021 00:00:00\n */\n\nexport default function previousSunday(date) {\n  requiredArgs(1, arguments);\n  return previousDay(date, 0);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport previousDay from \"../previousDay/index.js\";\n/**\n * @name previousThursday\n * @category Weekday Helpers\n * @summary When is the previous Thursday?\n *\n * @description\n * When is the previous Thursday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the previous Thursday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the previous Thursday before Jun, 18, 2021?\n * const result = previousThursday(new Date(2021, 5, 18))\n * //=> Thu June 17 2021 00:00:00\n */\n\nexport default function previousThursday(date) {\n  requiredArgs(1, arguments);\n  return previousDay(date, 4);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport previousDay from \"../previousDay/index.js\";\n/**\n * @name previousTuesday\n * @category Weekday Helpers\n * @summary When is the previous Tuesday?\n *\n * @description\n * When is the previous Tuesday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the previous Tuesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the previous Tuesday before Jun, 18, 2021?\n * const result = previousTuesday(new Date(2021, 5, 18))\n * //=> Tue June 15 2021 00:00:00\n */\n\nexport default function previousTuesday(date) {\n  requiredArgs(1, arguments);\n  return previousDay(date, 2);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport previousDay from \"../previousDay/index.js\";\n/**\n * @name previousWednesday\n * @category Weekday Helpers\n * @summary When is the previous Wednesday?\n *\n * @description\n * When is the previous Wednesday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the previous Wednesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the previous Wednesday before Jun, 18, 2021?\n * const result = previousWednesday(new Date(2021, 5, 18))\n * //=> Wed June 16 2021 00:00:00\n */\n\nexport default function previousWednesday(date) {\n  requiredArgs(1, arguments);\n  return previousDay(date, 3);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { monthsInQuarter } from \"../constants/index.js\";\n/**\n * @name quartersToMonths\n * @category Conversion Helpers\n * @summary Convert number of quarters to months.\n *\n * @description\n * Convert a number of quarters to a full number of months.\n *\n * @param {number} quarters - number of quarters to be converted\n *\n * @returns {number} the number of quarters converted in months\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 quarters to months\n * const result = quartersToMonths(2)\n * //=> 6\n */\n\nexport default function quartersToMonths(quarters) {\n  requiredArgs(1, arguments);\n  return Math.floor(quarters * monthsInQuarter);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { quartersInYear } from \"../constants/index.js\";\n/**\n * @name quartersToYears\n * @category Conversion Helpers\n * @summary Convert number of quarters to years.\n *\n * @description\n * Convert a number of quarters to a full number of years.\n *\n * @param {number} quarters - number of quarters to be converted\n *\n * @returns {number} the number of quarters converted in years\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 8 quarters to years\n * const result = quartersToYears(8)\n * //=> 2\n *\n * @example\n * // It uses floor rounding:\n * const result = quartersToYears(11)\n * //=> 2\n */\n\nexport default function quartersToYears(quarters) {\n  requiredArgs(1, arguments);\n  var years = quarters / quartersInYear;\n  return Math.floor(years);\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name roundToNearestMinutes\n * @category Minute Helpers\n * @summary Rounds the given date to the nearest minute\n *\n * @description\n * Rounds the given date to the nearest minute (or number of minutes).\n * Rounds up when the given date is exactly between the nearest round minutes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to round\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.nearestTo=1] - nearest number of minutes to round to. E.g. `15` to round to quarter hours.\n * @returns {Date} the new date rounded to the closest minute\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.nearestTo` must be between 1 and 30\n *\n * @example\n * // Round 10 July 2014 12:12:34 to nearest minute:\n * var result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\n * //=> Thu Jul 10 2014 12:13:00\n *\n * @example\n * // Round 10 July 2014 12:07:30 to nearest quarter hour:\n * var result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\n * // rounds up because given date is exactly between 12:00:00 and 12:15:00\n * //=> Thu Jul 10 2014 12:15:00\n */\n\nexport default function roundToNearestMinutes(dirtyDate, options) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only none provided present');\n  }\n\n  var nearestTo = options && 'nearestTo' in options ? toInteger(options.nearestTo) : 1;\n\n  if (nearestTo < 1 || nearestTo > 30) {\n    throw new RangeError('`options.nearestTo` must be between 1 and 30');\n  }\n\n  var date = toDate(dirtyDate);\n  var seconds = date.getSeconds(); // relevant if nearestTo is 1, which is the default case\n\n  var minutes = date.getMinutes() + seconds / 60;\n  var roundedMinutes = Math.floor(minutes / nearestTo) * nearestTo;\n  var remainderMinutes = minutes % nearestTo;\n  var addedMinutes = Math.round(remainderMinutes / nearestTo) * nearestTo;\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), roundedMinutes + addedMinutes);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { secondsInHour } from \"../constants/index.js\";\n/**\n * @name secondsToHours\n * @category Conversion Helpers\n * @summary Convert seconds to hours.\n *\n * @description\n * Convert a number of seconds to a full number of hours.\n *\n * @param {number} seconds - number of seconds to be converted\n *\n * @returns {number} the number of seconds converted in hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 7200 seconds into hours\n * const result = secondsToHours(7200)\n * //=> 2\n *\n * @example\n * // It uses floor rounding:\n * const result = secondsToHours(7199)\n * //=> 1\n */\n\nexport default function secondsToHours(seconds) {\n  requiredArgs(1, arguments);\n  var hours = seconds / secondsInHour;\n  return Math.floor(hours);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { millisecondsInSecond } from \"../constants/index.js\";\n/**\n * @name secondsToMilliseconds\n * @category Conversion Helpers\n * @summary Convert seconds to milliseconds.\n *\n * @description\n * Convert a number of seconds to a full number of milliseconds.\n *\n * @param {number} seconds - number of seconds to be converted\n *\n * @returns {number} the number of seconds converted in milliseconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 seconds into milliseconds\n * const result = secondsToMilliseconds(2)\n * //=> 2000\n */\n\nexport default function secondsToMilliseconds(seconds) {\n  requiredArgs(1, arguments);\n  return seconds * millisecondsInSecond;\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { secondsInMinute } from \"../constants/index.js\";\n/**\n * @name secondsToMinutes\n * @category Conversion Helpers\n * @summary Convert seconds to minutes.\n *\n * @description\n * Convert a number of seconds to a full number of minutes.\n *\n * @param {number} seconds - number of seconds to be converted\n *\n * @returns {number} the number of seconds converted in minutes\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 120 seconds into minutes\n * const result = secondsToMinutes(120)\n * //=> 2\n *\n * @example\n * // It uses floor rounding:\n * const result = secondsToMinutes(119)\n * //=> 1\n */\n\nexport default function secondsToMinutes(seconds) {\n  requiredArgs(1, arguments);\n  var minutes = seconds / secondsInMinute;\n  return Math.floor(minutes);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport getDaysInMonth from \"../getDaysInMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setMonth\n * @category Month Helpers\n * @summary Set the month to the given date.\n *\n * @description\n * Set the month to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} month - the month of the new date\n * @returns {Date} the new date with the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set February to 1 September 2014:\n * const result = setMonth(new Date(2014, 8, 1), 1)\n * //=> Sat Feb 01 2014 00:00:00\n */\n\nexport default function setMonth(dirtyDate, dirtyMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var month = toInteger(dirtyMonth);\n  var year = date.getFullYear();\n  var day = date.getDate();\n  var dateWithDesiredMonth = new Date(0);\n  dateWithDesiredMonth.setFullYear(year, month, 15);\n  dateWithDesiredMonth.setHours(0, 0, 0, 0);\n  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month\n  // if the original date was the last day of the longer month\n\n  date.setMonth(month, Math.min(day, daysInMonth));\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport setMonth from \"../setMonth/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Object} values - an object with options\n * @param {Number} [values.year] - the number of years to be set\n * @param {Number} [values.month] - the number of months to be set\n * @param {Number} [values.date] - the number of days to be set\n * @param {Number} [values.hours] - the number of hours to be set\n * @param {Number} [values.minutes] - the number of minutes to be set\n * @param {Number} [values.seconds] - the number of seconds to be set\n * @param {Number} [values.milliseconds] - the number of milliseconds to be set\n * @returns {Date} the new date with options set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `values` must be an object\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * var result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * var result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\nexport default function set(dirtyDate, values) {\n  requiredArgs(2, arguments);\n\n  if (typeof values !== 'object' || values === null) {\n    throw new RangeError('values parameter must be an object');\n  }\n\n  var date = toDate(dirtyDate); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  if (values.year != null) {\n    date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    date = setMonth(date, values.month);\n  }\n\n  if (values.date != null) {\n    date.setDate(toInteger(values.date));\n  }\n\n  if (values.hours != null) {\n    date.setHours(toInteger(values.hours));\n  }\n\n  if (values.minutes != null) {\n    date.setMinutes(toInteger(values.minutes));\n  }\n\n  if (values.seconds != null) {\n    date.setSeconds(toInteger(values.seconds));\n  }\n\n  if (values.milliseconds != null) {\n    date.setMilliseconds(toInteger(values.milliseconds));\n  }\n\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setDate\n * @category Day Helpers\n * @summary Set the day of the month to the given date.\n *\n * @description\n * Set the day of the month to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} dayOfMonth - the day of the month of the new date\n * @returns {Date} the new date with the day of the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 30th day of the month to 1 September 2014:\n * var result = setDate(new Date(2014, 8, 1), 30)\n * //=> Tue Sep 30 2014 00:00:00\n */\n\nexport default function setDate(dirtyDate, dirtyDayOfMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfMonth = toInteger(dirtyDayOfMonth);\n  date.setDate(dayOfMonth);\n  return date;\n}","import addDays from \"../addDays/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} day - the day of the week of the new date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the new date with the day of the week set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * var result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * var result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport default function setDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var delta = 7 - weekStartsOn;\n  var diff = day < 0 || day > 6 ? day - (currentDay + delta) % 7 : (dayIndex + delta) % 7 - (currentDay + delta) % 7;\n  return addDays(date, diff);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setDayOfYear\n * @category Day Helpers\n * @summary Set the day of the year to the given date.\n *\n * @description\n * Set the day of the year to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} dayOfYear - the day of the year of the new date\n * @returns {Date} the new date with the day of the year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 2nd day of the year to 2 July 2014:\n * var result = setDayOfYear(new Date(2014, 6, 2), 2)\n * //=> Thu Jan 02 2014 00:00:00\n */\n\nexport default function setDayOfYear(dirtyDate, dirtyDayOfYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfYear = toInteger(dirtyDayOfYear);\n  date.setMonth(0);\n  date.setDate(dayOfYear);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setHours\n * @category Hour Helpers\n * @summary Set the hours to the given date.\n *\n * @description\n * Set the hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} hours - the hours of the new date\n * @returns {Date} the new date with the hours set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 4 hours to 1 September 2014 11:30:00:\n * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)\n * //=> Mon Sep 01 2014 04:30:00\n */\n\nexport default function setHours(dirtyDate, dirtyHours) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var hours = toInteger(dirtyHours);\n  date.setHours(hours);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport getISODay from \"../getISODay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setISODay\n * @category Weekday Helpers\n * @summary Set the day of the ISO week to the given date.\n *\n * @description\n * Set the day of the ISO week to the given date.\n * ISO week starts with Monday.\n * 7 is the index of Sunday, 1 is the index of Monday etc.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} day - the day of the ISO week of the new date\n * @returns {Date} the new date with the day of the ISO week set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set Sunday to 1 September 2014:\n * const result = setISODay(new Date(2014, 8, 1), 7)\n * //=> Sun Sep 07 2014 00:00:00\n */\n\nexport default function setISODay(dirtyDate, dirtyDay) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = getISODay(date);\n  var diff = day - currentDay;\n  return addDays(date, diff);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport getISOWeek from \"../getISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setISOWeek\n * @category ISO Week Helpers\n * @summary Set the ISO week to the given date.\n *\n * @description\n * Set the ISO week to the given date, saving the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} isoWeek - the ISO week of the new date\n * @returns {Date} the new date with the ISO week set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 53rd ISO week to 7 August 2004:\n * const result = setISOWeek(new Date(2004, 7, 7), 53)\n * //=> Sat Jan 01 2005 00:00:00\n */\n\nexport default function setISOWeek(dirtyDate, dirtyISOWeek) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getISOWeek(date) - isoWeek;\n  date.setDate(date.getDate() - diff * 7);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setMilliseconds\n * @category Millisecond Helpers\n * @summary Set the milliseconds to the given date.\n *\n * @description\n * Set the milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} milliseconds - the milliseconds of the new date\n * @returns {Date} the new date with the milliseconds set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 300 milliseconds to 1 September 2014 11:30:40.500:\n * const result = setMilliseconds(new Date(2014, 8, 1, 11, 30, 40, 500), 300)\n * //=> Mon Sep 01 2014 11:30:40.300\n */\n\nexport default function setMilliseconds(dirtyDate, dirtyMilliseconds) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var milliseconds = toInteger(dirtyMilliseconds);\n  date.setMilliseconds(milliseconds);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setMinutes\n * @category Minute Helpers\n * @summary Set the minutes to the given date.\n *\n * @description\n * Set the minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} minutes - the minutes of the new date\n * @returns {Date} the new date with the minutes set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 minutes to 1 September 2014 11:30:40:\n * const result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:45:40\n */\n\nexport default function setMinutes(dirtyDate, dirtyMinutes) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = toInteger(dirtyMinutes);\n  date.setMinutes(minutes);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport setMonth from \"../setMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setQuarter\n * @category Quarter Helpers\n * @summary Set the year quarter to the given date.\n *\n * @description\n * Set the year quarter to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} quarter - the quarter of the new date\n * @returns {Date} the new date with the quarter set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 2nd quarter to 2 July 2014:\n * const result = setQuarter(new Date(2014, 6, 2), 2)\n * //=> Wed Apr 02 2014 00:00:00\n */\n\nexport default function setQuarter(dirtyDate, dirtyQuarter) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var quarter = toInteger(dirtyQuarter);\n  var oldQuarter = Math.floor(date.getMonth() / 3) + 1;\n  var diff = quarter - oldQuarter;\n  return setMonth(date, date.getMonth() + diff * 3);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setSeconds\n * @category Second Helpers\n * @summary Set the seconds to the given date.\n *\n * @description\n * Set the seconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} seconds - the seconds of the new date\n * @returns {Date} the new date with the seconds set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 seconds to 1 September 2014 11:30:40:\n * const result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:30:45\n */\n\nexport default function setSeconds(dirtyDate, dirtySeconds) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var seconds = toInteger(dirtySeconds);\n  date.setSeconds(seconds);\n  return date;\n}","import getWeek from \"../getWeek/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name setWeek\n * @category Week Helpers\n * @summary Set the local week to the given date.\n *\n * @description\n * Set the local week to the given date, saving the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} week - the week of the new date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Date} the new date with the local week set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Set the 1st week to 2 January 2005 with default options:\n * var result = setWeek(new Date(2005, 0, 2), 1)\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // Set the 1st week to 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January:\n * var result = setWeek(new Date(2005, 0, 2), 1, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sun Jan 4 2004 00:00:00\n */\nexport default function setWeek(dirtyDate, dirtyWeek, options) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getWeek(date, options) - week;\n  date.setDate(date.getDate() - diff * 7);\n  return date;\n}","import differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport startOfWeekYear from \"../startOfWeekYear/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name setWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Set the local week-numbering year to the given date.\n *\n * @description\n * Set the local week-numbering year to the given date,\n * saving the week number and the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} weekYear - the local week-numbering year of the new date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Date} the new date with the local week-numbering year set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Set the local week-numbering year 2004 to 2 January 2010 with default options:\n * var result = setWeekYear(new Date(2010, 0, 2), 2004)\n * //=> Sat Jan 03 2004 00:00:00\n *\n * @example\n * // Set the local week-numbering year 2004 to 2 January 2010,\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * var result = setWeekYear(new Date(2010, 0, 2), 2004, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sat Jan 01 2005 00:00:00\n */\nexport default function setWeekYear(dirtyDate, dirtyWeekYear) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  requiredArgs(2, arguments);\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var date = toDate(dirtyDate);\n  var weekYear = toInteger(dirtyWeekYear);\n  var diff = differenceInCalendarDays(date, startOfWeekYear(date, options));\n  var firstWeek = new Date(0);\n  firstWeek.setFullYear(weekYear, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  date = startOfWeekYear(firstWeek, options);\n  date.setDate(date.getDate() + diff);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setYear\n * @category Year Helpers\n * @summary Set the year to the given date.\n *\n * @description\n * Set the year to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} year - the year of the new date\n * @returns {Date} the new date with the year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set year 2013 to 1 September 2014:\n * const result = setYear(new Date(2014, 8, 1), 2013)\n * //=> Sun Sep 01 2013 00:00:00\n */\n\nexport default function setYear(dirtyDate, dirtyYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var year = toInteger(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  date.setFullYear(year);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDecade\n * @category Decade Helpers\n * @summary Return the start of a decade for the given date.\n *\n * @description\n * Return the start of a decade for the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a decade\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a decade for 21 October 2015 00:00:00:\n * const result = startOfDecade(new Date(2015, 9, 21, 00, 00, 00))\n * //=> Jan 01 2010 00:00:00\n */\n\nexport default function startOfDecade(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var decade = Math.floor(year / 10) * 10;\n  date.setFullYear(decade, 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import startOfDay from \"../startOfDay/index.js\";\n/**\n * @name startOfToday\n * @category Day Helpers\n * @summary Return the start of today.\n * @pure false\n *\n * @description\n * Return the start of today.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the start of today\n *\n * @example\n * // If today is 6 October 2014:\n * var result = startOfToday()\n * //=> Mon Oct 6 2014 00:00:00\n */\n\nexport default function startOfToday() {\n  return startOfDay(Date.now());\n}","/**\n * @name startOfTomorrow\n * @category Day Helpers\n * @summary Return the start of tomorrow.\n * @pure false\n *\n * @description\n * Return the start of tomorrow.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the start of tomorrow\n *\n * @example\n * // If today is 6 October 2014:\n * const result = startOfTomorrow()\n * //=> Tue Oct 7 2014 00:00:00\n */\nexport default function startOfTomorrow() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day + 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","/**\n * @name startOfYesterday\n * @category Day Helpers\n * @summary Return the start of yesterday.\n * @pure false\n *\n * @description\n * Return the start of yesterday.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the start of yesterday\n *\n * @example\n * // If today is 6 October 2014:\n * const result = startOfYesterday()\n * //=> Sun Oct 5 2014 00:00:00\n */\nexport default function startOfYesterday() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day - 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addBusinessDays from \"../addBusinessDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subBusinessDays\n * @category Day Helpers\n * @summary Substract the specified number of business days (mon - fri) to the given date.\n *\n * @description\n * Substract the specified number of business days (mon - fri) to the given date, ignoring weekends.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of business days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the business days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Substract 10 business days from 1 September 2014:\n * var result = subBusinessDays(new Date(2014, 8, 1), 10)\n * //=> Mon Aug 18 2014 00:00:00 (skipped weekend days)\n */\n\nexport default function subBusinessDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addBusinessDays(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addHours from \"../addHours/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subHours\n * @category Hour Helpers\n * @summary Subtract the specified number of hours from the given date.\n *\n * @description\n * Subtract the specified number of hours from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 2 hours from 11 July 2014 01:00:00:\n * const result = subHours(new Date(2014, 6, 11, 1, 0), 2)\n * //=> Thu Jul 10 2014 23:00:00\n */\n\nexport default function subHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addHours(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMinutes from \"../addMinutes/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMinutes\n * @category Minute Helpers\n * @summary Subtract the specified number of minutes from the given date.\n *\n * @description\n * Subtract the specified number of minutes from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 30 minutes from 10 July 2014 12:00:00:\n * const result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 11:30:00\n */\n\nexport default function subMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMinutes(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addQuarters from \"../addQuarters/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subQuarters\n * @category Quarter Helpers\n * @summary Subtract the specified number of year quarters from the given date.\n *\n * @description\n * Subtract the specified number of year quarters from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of quarters to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the quarters subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 3 quarters from 1 September 2014:\n * const result = subQuarters(new Date(2014, 8, 1), 3)\n * //=> Sun Dec 01 2013 00:00:00\n */\n\nexport default function subQuarters(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addQuarters(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addSeconds from \"../addSeconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subSeconds\n * @category Second Helpers\n * @summary Subtract the specified number of seconds from the given date.\n *\n * @description\n * Subtract the specified number of seconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of seconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the seconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 30 seconds from 10 July 2014 12:45:00:\n * const result = subSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:44:30\n */\n\nexport default function subSeconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addSeconds(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addWeeks from \"../addWeeks/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subWeeks\n * @category Week Helpers\n * @summary Subtract the specified number of weeks from the given date.\n *\n * @description\n * Subtract the specified number of weeks from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 4 weeks from 1 September 2014:\n * const result = subWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Aug 04 2014 00:00:00\n */\n\nexport default function subWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addWeeks(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addYears from \"../addYears/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * const result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\n\nexport default function subYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addYears(dirtyDate, -amount);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { daysInWeek } from \"../constants/index.js\";\n/**\n * @name weeksToDays\n * @category Conversion Helpers\n * @summary Convert weeks to days.\n *\n * @description\n * Convert a number of weeks to a full number of days.\n *\n * @param {number} weeks - number of weeks to be converted\n *\n * @returns {number} the number of weeks converted in days\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 weeks into days\n * const result = weeksToDays(2)\n * //=> 14\n */\n\nexport default function weeksToDays(weeks) {\n  requiredArgs(1, arguments);\n  return Math.floor(weeks * daysInWeek);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { monthsInYear } from \"../constants/index.js\";\n/**\n * @name yearsToMonths\n * @category Conversion Helpers\n * @summary Convert years to months.\n *\n * @description\n * Convert a number of years to a full number of months.\n *\n * @param {number} years - number of years to be converted\n *\n * @returns {number} the number of years converted in months\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 years into months\n * const result = yearsToMonths(2)\n * //=> 24\n */\n\nexport default function yearsToMonths(years) {\n  requiredArgs(1, arguments);\n  return Math.floor(years * monthsInYear);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { quartersInYear } from \"../constants/index.js\";\n/**\n * @name yearsToQuarters\n * @category Conversion Helpers\n * @summary Convert years to quarters.\n *\n * @description\n * Convert a number of years to a full number of quarters.\n *\n * @param {number} years - number of years to be converted\n *\n * @returns {number} the number of years converted in quarters\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 years to quarters\n * const result = yearsToQuarters(2)\n * //=> 8\n */\n\nexport default function yearsToQuarters(years) {\n  requiredArgs(1, arguments);\n  return Math.floor(years * quartersInYear);\n}","// This file is generated automatically by `scripts/build/indices.js`. Please, don't change it.\nexport { default as add } from \"./add/index.js\";\nexport { default as addBusinessDays } from \"./addBusinessDays/index.js\";\nexport { default as addDays } from \"./addDays/index.js\";\nexport { default as addHours } from \"./addHours/index.js\";\nexport { default as addISOWeekYears } from \"./addISOWeekYears/index.js\";\nexport { default as addMilliseconds } from \"./addMilliseconds/index.js\";\nexport { default as addMinutes } from \"./addMinutes/index.js\";\nexport { default as addMonths } from \"./addMonths/index.js\";\nexport { default as addQuarters } from \"./addQuarters/index.js\";\nexport { default as addSeconds } from \"./addSeconds/index.js\";\nexport { default as addWeeks } from \"./addWeeks/index.js\";\nexport { default as addYears } from \"./addYears/index.js\";\nexport { default as areIntervalsOverlapping } from \"./areIntervalsOverlapping/index.js\";\nexport { default as clamp } from \"./clamp/index.js\";\nexport { default as closestIndexTo } from \"./closestIndexTo/index.js\";\nexport { default as closestTo } from \"./closestTo/index.js\";\nexport { default as compareAsc } from \"./compareAsc/index.js\";\nexport { default as compareDesc } from \"./compareDesc/index.js\";\nexport { default as daysToWeeks } from \"./daysToWeeks/index.js\";\nexport { default as differenceInBusinessDays } from \"./differenceInBusinessDays/index.js\";\nexport { default as differenceInCalendarDays } from \"./differenceInCalendarDays/index.js\";\nexport { default as differenceInCalendarISOWeekYears } from \"./differenceInCalendarISOWeekYears/index.js\";\nexport { default as differenceInCalendarISOWeeks } from \"./differenceInCalendarISOWeeks/index.js\";\nexport { default as differenceInCalendarMonths } from \"./differenceInCalendarMonths/index.js\";\nexport { default as differenceInCalendarQuarters } from \"./differenceInCalendarQuarters/index.js\";\nexport { default as differenceInCalendarWeeks } from \"./differenceInCalendarWeeks/index.js\";\nexport { default as differenceInCalendarYears } from \"./differenceInCalendarYears/index.js\";\nexport { default as differenceInDays } from \"./differenceInDays/index.js\";\nexport { default as differenceInHours } from \"./differenceInHours/index.js\";\nexport { default as differenceInISOWeekYears } from \"./differenceInISOWeekYears/index.js\";\nexport { default as differenceInMilliseconds } from \"./differenceInMilliseconds/index.js\";\nexport { default as differenceInMinutes } from \"./differenceInMinutes/index.js\";\nexport { default as differenceInMonths } from \"./differenceInMonths/index.js\";\nexport { default as differenceInQuarters } from \"./differenceInQuarters/index.js\";\nexport { default as differenceInSeconds } from \"./differenceInSeconds/index.js\";\nexport { default as differenceInWeeks } from \"./differenceInWeeks/index.js\";\nexport { default as differenceInYears } from \"./differenceInYears/index.js\";\nexport { default as eachDayOfInterval } from \"./eachDayOfInterval/index.js\";\nexport { default as eachHourOfInterval } from \"./eachHourOfInterval/index.js\";\nexport { default as eachMinuteOfInterval } from \"./eachMinuteOfInterval/index.js\";\nexport { default as eachMonthOfInterval } from \"./eachMonthOfInterval/index.js\";\nexport { default as eachQuarterOfInterval } from \"./eachQuarterOfInterval/index.js\";\nexport { default as eachWeekOfInterval } from \"./eachWeekOfInterval/index.js\";\nexport { default as eachWeekendOfInterval } from \"./eachWeekendOfInterval/index.js\";\nexport { default as eachWeekendOfMonth } from \"./eachWeekendOfMonth/index.js\";\nexport { default as eachWeekendOfYear } from \"./eachWeekendOfYear/index.js\";\nexport { default as eachYearOfInterval } from \"./eachYearOfInterval/index.js\";\nexport { default as endOfDay } from \"./endOfDay/index.js\";\nexport { default as endOfDecade } from \"./endOfDecade/index.js\";\nexport { default as endOfHour } from \"./endOfHour/index.js\";\nexport { default as endOfISOWeek } from \"./endOfISOWeek/index.js\";\nexport { default as endOfISOWeekYear } from \"./endOfISOWeekYear/index.js\";\nexport { default as endOfMinute } from \"./endOfMinute/index.js\";\nexport { default as endOfMonth } from \"./endOfMonth/index.js\";\nexport { default as endOfQuarter } from \"./endOfQuarter/index.js\";\nexport { default as endOfSecond } from \"./endOfSecond/index.js\";\nexport { default as endOfToday } from \"./endOfToday/index.js\";\nexport { default as endOfTomorrow } from \"./endOfTomorrow/index.js\";\nexport { default as endOfWeek } from \"./endOfWeek/index.js\";\nexport { default as endOfYear } from \"./endOfYear/index.js\";\nexport { default as endOfYesterday } from \"./endOfYesterday/index.js\";\nexport { default as format } from \"./format/index.js\";\nexport { default as formatDistance } from \"./formatDistance/index.js\";\nexport { default as formatDistanceStrict } from \"./formatDistanceStrict/index.js\";\nexport { default as formatDistanceToNow } from \"./formatDistanceToNow/index.js\";\nexport { default as formatDistanceToNowStrict } from \"./formatDistanceToNowStrict/index.js\";\nexport { default as formatDuration } from \"./formatDuration/index.js\";\nexport { default as formatISO } from \"./formatISO/index.js\";\nexport { default as formatISO9075 } from \"./formatISO9075/index.js\";\nexport { default as formatISODuration } from \"./formatISODuration/index.js\";\nexport { default as formatRFC3339 } from \"./formatRFC3339/index.js\";\nexport { default as formatRFC7231 } from \"./formatRFC7231/index.js\";\nexport { default as formatRelative } from \"./formatRelative/index.js\";\nexport { default as fromUnixTime } from \"./fromUnixTime/index.js\";\nexport { default as getDate } from \"./getDate/index.js\";\nexport { default as getDay } from \"./getDay/index.js\";\nexport { default as getDayOfYear } from \"./getDayOfYear/index.js\";\nexport { default as getDaysInMonth } from \"./getDaysInMonth/index.js\";\nexport { default as getDaysInYear } from \"./getDaysInYear/index.js\";\nexport { default as getDecade } from \"./getDecade/index.js\";\nexport { default as getHours } from \"./getHours/index.js\";\nexport { default as getISODay } from \"./getISODay/index.js\";\nexport { default as getISOWeek } from \"./getISOWeek/index.js\";\nexport { default as getISOWeekYear } from \"./getISOWeekYear/index.js\";\nexport { default as getISOWeeksInYear } from \"./getISOWeeksInYear/index.js\";\nexport { default as getMilliseconds } from \"./getMilliseconds/index.js\";\nexport { default as getMinutes } from \"./getMinutes/index.js\";\nexport { default as getMonth } from \"./getMonth/index.js\";\nexport { default as getOverlappingDaysInIntervals } from \"./getOverlappingDaysInIntervals/index.js\";\nexport { default as getQuarter } from \"./getQuarter/index.js\";\nexport { default as getSeconds } from \"./getSeconds/index.js\";\nexport { default as getTime } from \"./getTime/index.js\";\nexport { default as getUnixTime } from \"./getUnixTime/index.js\";\nexport { default as getWeek } from \"./getWeek/index.js\";\nexport { default as getWeekOfMonth } from \"./getWeekOfMonth/index.js\";\nexport { default as getWeekYear } from \"./getWeekYear/index.js\";\nexport { default as getWeeksInMonth } from \"./getWeeksInMonth/index.js\";\nexport { default as getYear } from \"./getYear/index.js\";\nexport { default as hoursToMilliseconds } from \"./hoursToMilliseconds/index.js\";\nexport { default as hoursToMinutes } from \"./hoursToMinutes/index.js\";\nexport { default as hoursToSeconds } from \"./hoursToSeconds/index.js\";\nexport { default as intervalToDuration } from \"./intervalToDuration/index.js\";\nexport { default as intlFormat } from \"./intlFormat/index.js\";\nexport { default as isAfter } from \"./isAfter/index.js\";\nexport { default as isBefore } from \"./isBefore/index.js\";\nexport { default as isDate } from \"./isDate/index.js\";\nexport { default as isEqual } from \"./isEqual/index.js\";\nexport { default as isExists } from \"./isExists/index.js\";\nexport { default as isFirstDayOfMonth } from \"./isFirstDayOfMonth/index.js\";\nexport { default as isFriday } from \"./isFriday/index.js\";\nexport { default as isFuture } from \"./isFuture/index.js\";\nexport { default as isLastDayOfMonth } from \"./isLastDayOfMonth/index.js\";\nexport { default as isLeapYear } from \"./isLeapYear/index.js\";\nexport { default as isMatch } from \"./isMatch/index.js\";\nexport { default as isMonday } from \"./isMonday/index.js\";\nexport { default as isPast } from \"./isPast/index.js\";\nexport { default as isSameDay } from \"./isSameDay/index.js\";\nexport { default as isSameHour } from \"./isSameHour/index.js\";\nexport { default as isSameISOWeek } from \"./isSameISOWeek/index.js\";\nexport { default as isSameISOWeekYear } from \"./isSameISOWeekYear/index.js\";\nexport { default as isSameMinute } from \"./isSameMinute/index.js\";\nexport { default as isSameMonth } from \"./isSameMonth/index.js\";\nexport { default as isSameQuarter } from \"./isSameQuarter/index.js\";\nexport { default as isSameSecond } from \"./isSameSecond/index.js\";\nexport { default as isSameWeek } from \"./isSameWeek/index.js\";\nexport { default as isSameYear } from \"./isSameYear/index.js\";\nexport { default as isSaturday } from \"./isSaturday/index.js\";\nexport { default as isSunday } from \"./isSunday/index.js\";\nexport { default as isThisHour } from \"./isThisHour/index.js\";\nexport { default as isThisISOWeek } from \"./isThisISOWeek/index.js\";\nexport { default as isThisMinute } from \"./isThisMinute/index.js\";\nexport { default as isThisMonth } from \"./isThisMonth/index.js\";\nexport { default as isThisQuarter } from \"./isThisQuarter/index.js\";\nexport { default as isThisSecond } from \"./isThisSecond/index.js\";\nexport { default as isThisWeek } from \"./isThisWeek/index.js\";\nexport { default as isThisYear } from \"./isThisYear/index.js\";\nexport { default as isThursday } from \"./isThursday/index.js\";\nexport { default as isToday } from \"./isToday/index.js\";\nexport { default as isTomorrow } from \"./isTomorrow/index.js\";\nexport { default as isTuesday } from \"./isTuesday/index.js\";\nexport { default as isValid } from \"./isValid/index.js\";\nexport { default as isWednesday } from \"./isWednesday/index.js\";\nexport { default as isWeekend } from \"./isWeekend/index.js\";\nexport { default as isWithinInterval } from \"./isWithinInterval/index.js\";\nexport { default as isYesterday } from \"./isYesterday/index.js\";\nexport { default as lastDayOfDecade } from \"./lastDayOfDecade/index.js\";\nexport { default as lastDayOfISOWeek } from \"./lastDayOfISOWeek/index.js\";\nexport { default as lastDayOfISOWeekYear } from \"./lastDayOfISOWeekYear/index.js\";\nexport { default as lastDayOfMonth } from \"./lastDayOfMonth/index.js\";\nexport { default as lastDayOfQuarter } from \"./lastDayOfQuarter/index.js\";\nexport { default as lastDayOfWeek } from \"./lastDayOfWeek/index.js\";\nexport { default as lastDayOfYear } from \"./lastDayOfYear/index.js\";\nexport { default as lightFormat } from \"./lightFormat/index.js\";\nexport { default as max } from \"./max/index.js\";\nexport { default as milliseconds } from \"./milliseconds/index.js\";\nexport { default as millisecondsToHours } from \"./millisecondsToHours/index.js\";\nexport { default as millisecondsToMinutes } from \"./millisecondsToMinutes/index.js\";\nexport { default as millisecondsToSeconds } from \"./millisecondsToSeconds/index.js\";\nexport { default as min } from \"./min/index.js\";\nexport { default as minutesToHours } from \"./minutesToHours/index.js\";\nexport { default as minutesToMilliseconds } from \"./minutesToMilliseconds/index.js\";\nexport { default as minutesToSeconds } from \"./minutesToSeconds/index.js\";\nexport { default as monthsToQuarters } from \"./monthsToQuarters/index.js\";\nexport { default as monthsToYears } from \"./monthsToYears/index.js\";\nexport { default as nextDay } from \"./nextDay/index.js\";\nexport { default as nextFriday } from \"./nextFriday/index.js\";\nexport { default as nextMonday } from \"./nextMonday/index.js\";\nexport { default as nextSaturday } from \"./nextSaturday/index.js\";\nexport { default as nextSunday } from \"./nextSunday/index.js\";\nexport { default as nextThursday } from \"./nextThursday/index.js\";\nexport { default as nextTuesday } from \"./nextTuesday/index.js\";\nexport { default as nextWednesday } from \"./nextWednesday/index.js\";\nexport { default as parse } from \"./parse/index.js\";\nexport { default as parseISO } from \"./parseISO/index.js\";\nexport { default as parseJSON } from \"./parseJSON/index.js\";\nexport { default as previousDay } from \"./previousDay/index.js\";\nexport { default as previousFriday } from \"./previousFriday/index.js\";\nexport { default as previousMonday } from \"./previousMonday/index.js\";\nexport { default as previousSaturday } from \"./previousSaturday/index.js\";\nexport { default as previousSunday } from \"./previousSunday/index.js\";\nexport { default as previousThursday } from \"./previousThursday/index.js\";\nexport { default as previousTuesday } from \"./previousTuesday/index.js\";\nexport { default as previousWednesday } from \"./previousWednesday/index.js\";\nexport { default as quartersToMonths } from \"./quartersToMonths/index.js\";\nexport { default as quartersToYears } from \"./quartersToYears/index.js\";\nexport { default as roundToNearestMinutes } from \"./roundToNearestMinutes/index.js\";\nexport { default as secondsToHours } from \"./secondsToHours/index.js\";\nexport { default as secondsToMilliseconds } from \"./secondsToMilliseconds/index.js\";\nexport { default as secondsToMinutes } from \"./secondsToMinutes/index.js\";\nexport { default as set } from \"./set/index.js\";\nexport { default as setDate } from \"./setDate/index.js\";\nexport { default as setDay } from \"./setDay/index.js\";\nexport { default as setDayOfYear } from \"./setDayOfYear/index.js\";\nexport { default as setHours } from \"./setHours/index.js\";\nexport { default as setISODay } from \"./setISODay/index.js\";\nexport { default as setISOWeek } from \"./setISOWeek/index.js\";\nexport { default as setISOWeekYear } from \"./setISOWeekYear/index.js\";\nexport { default as setMilliseconds } from \"./setMilliseconds/index.js\";\nexport { default as setMinutes } from \"./setMinutes/index.js\";\nexport { default as setMonth } from \"./setMonth/index.js\";\nexport { default as setQuarter } from \"./setQuarter/index.js\";\nexport { default as setSeconds } from \"./setSeconds/index.js\";\nexport { default as setWeek } from \"./setWeek/index.js\";\nexport { default as setWeekYear } from \"./setWeekYear/index.js\";\nexport { default as setYear } from \"./setYear/index.js\";\nexport { default as startOfDay } from \"./startOfDay/index.js\";\nexport { default as startOfDecade } from \"./startOfDecade/index.js\";\nexport { default as startOfHour } from \"./startOfHour/index.js\";\nexport { default as startOfISOWeek } from \"./startOfISOWeek/index.js\";\nexport { default as startOfISOWeekYear } from \"./startOfISOWeekYear/index.js\";\nexport { default as startOfMinute } from \"./startOfMinute/index.js\";\nexport { default as startOfMonth } from \"./startOfMonth/index.js\";\nexport { default as startOfQuarter } from \"./startOfQuarter/index.js\";\nexport { default as startOfSecond } from \"./startOfSecond/index.js\";\nexport { default as startOfToday } from \"./startOfToday/index.js\";\nexport { default as startOfTomorrow } from \"./startOfTomorrow/index.js\";\nexport { default as startOfWeek } from \"./startOfWeek/index.js\";\nexport { default as startOfWeekYear } from \"./startOfWeekYear/index.js\";\nexport { default as startOfYear } from \"./startOfYear/index.js\";\nexport { default as startOfYesterday } from \"./startOfYesterday/index.js\";\nexport { default as sub } from \"./sub/index.js\";\nexport { default as subBusinessDays } from \"./subBusinessDays/index.js\";\nexport { default as subDays } from \"./subDays/index.js\";\nexport { default as subHours } from \"./subHours/index.js\";\nexport { default as subISOWeekYears } from \"./subISOWeekYears/index.js\";\nexport { default as subMilliseconds } from \"./subMilliseconds/index.js\";\nexport { default as subMinutes } from \"./subMinutes/index.js\";\nexport { default as subMonths } from \"./subMonths/index.js\";\nexport { default as subQuarters } from \"./subQuarters/index.js\";\nexport { default as subSeconds } from \"./subSeconds/index.js\";\nexport { default as subWeeks } from \"./subWeeks/index.js\";\nexport { default as subYears } from \"./subYears/index.js\";\nexport { default as toDate } from \"./toDate/index.js\";\nexport { default as weeksToDays } from \"./weeksToDays/index.js\";\nexport { default as yearsToMonths } from \"./yearsToMonths/index.js\";\nexport { default as yearsToQuarters } from \"./yearsToQuarters/index.js\";\nexport * from \"./constants/index.js\";","import { getDay, format, getDate } from 'date-fns'\r\nconst button = document.querySelector('.date-picker-button')\r\nconst datepicker = document.querySelector('.date-picker')\r\nconst currentMonth = document.querySelector('.current-month')\r\nconst grid = document.querySelector('.date-picker-grid-dates')\r\nconst weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\nconst datePickerViewDate = new Date()\r\nconst selectedDate = new Date()\r\nupdateDOM()\r\n\r\naddEventListener('click', e => {\r\n  if (!e.target.matches('.date-picker-button')) return\r\n  datepicker.classList.toggle('show')\r\n})\r\n\r\naddEventListener('click', e => {\r\n  if (!e.target.matches('.month-button')) return\r\n  if (e.target.matches('.prev-month-button')) changeMonth(-1)\r\n  if (e.target.matches('.next-month-button')) changeMonth(1)\r\n})\r\n\r\naddEventListener('click', e => {\r\n  if (!e.target.matches('.year-button')) return\r\n  if (e.target.matches('.prev-year-button')) changeYear(-1)\r\n  if (e.target.matches('.next-year-button')) changeYear(1)\r\n})\r\n\r\naddEventListener('click', e => {\r\n  if (!e.target.matches('.date')) return\r\n  const selected = document.querySelector('.selected')\r\n  if (selected) selected.classList.remove('selected')\r\n  e.target.classList.add('selected')\r\n  const dateArray = e.target.dataset.date.split(',')\r\n  setDateFromArray(selectedDate, dateArray)\r\n  updateButtonText()\r\n  if (e.target.matches('.date-picker-other-month-date')) {\r\n    setDateFromArray(datePickerViewDate, dateArray)\r\n    updateDatePicker()\r\n  }\r\n})\r\n\r\nfunction setDateFromArray(date, dateArray) {\r\n  date.setFullYear(dateArray[0])\r\n  date.setMonth(dateArray[1])\r\n  date.setDate(dateArray[2])\r\n}\r\n\r\nfunction setDateEqual(sourceDate, targetDate) {\r\n  target.setFullYear(source.getFullYear())\r\n  target.setMonth(source.getMonth())\r\n  target.setDate(source.getDate())\r\n}\r\n\r\nfunction changeMonth(advance) {\r\n  datePickerViewDate.setMonth(datePickerViewDate.getMonth() + advance)\r\n  updateDatePicker()\r\n}\r\nfunction changeYear(advance) {\r\n  datePickerViewDate.setFullYear(datePickerViewDate.getFullYear() + advance)\r\n  updateDatePicker()\r\n}\r\n\r\nfunction formatDateString(date) {\r\n  return format(date, 'do MMMM yyyy')\r\n}\r\n\r\nfunction formatCurrentMonth(date) {\r\n  return format(date, 'MMMM - yyyy')\r\n}\r\n\r\nfunction updateCurrentMonth() {\r\n  currentMonth.innerText = formatCurrentMonth(datePickerViewDate)\r\n}\r\n\r\nfunction getDateFrom(date) {\r\n  let dt = new Date()\r\n  dt.setFullYear(date.getFullYear())\r\n  dt.setMonth(date.getMonth())\r\n  dt.setDate(date.getDate())\r\n  return dt\r\n}\r\n\r\nfunction getDaysFromPreviousMonth() {\r\n  let currentDay = getFirstWeekdayOfCurrentMonth()\r\n  let currentDate = getFirstOfCurrentMonth()\r\n  const daysFromPreviousMonth = []\r\n  while (currentDay > 0) {\r\n    currentDay--\r\n    currentDate.setDate(currentDate.getDate() - 1)\r\n    let date = getDateFrom(currentDate)\r\n    daysFromPreviousMonth.unshift(date)\r\n  }\r\n  return daysFromPreviousMonth\r\n}\r\n\r\nfunction getDaysFromCurrentMonth() {\r\n  let currentDate = getFirstOfCurrentMonth()\r\n  const month = currentDate.getMonth()\r\n  const daysFromMonth = []\r\n  while (currentDate.getMonth() === month) {\r\n    let date = getDateFrom(currentDate)\r\n    daysFromMonth.push(date)\r\n    currentDate.setDate(currentDate.getDate() + 1)\r\n  }\r\n  return daysFromMonth\r\n}\r\n\r\nfunction getDaysFromNextMonth() {\r\n  let currentDate = new Date(getFirstOfCurrentMonth())\r\n  currentDate.setMonth(currentDate.getMonth() + 1)\r\n  const daysFromNextMonth = []\r\n  let currentDay = getDay(currentDate)\r\n  while (currentDay <= 6) {\r\n    let date = getDateFrom(currentDate)\r\n    daysFromNextMonth.push(date)\r\n    currentDate.setDate(currentDate.getDate() + 1)\r\n    currentDay++\r\n  }\r\n  return daysFromNextMonth\r\n}\r\n\r\nfunction getFirstOfCurrentMonth() {\r\n  const year = datePickerViewDate.getFullYear()\r\n  const month = datePickerViewDate.getMonth()\r\n  return new Date(year, month, 1)\r\n}\r\n\r\nfunction getFirstWeekdayOfCurrentMonth() {\r\n  return getDay(getFirstOfCurrentMonth())\r\n}\r\n\r\nfunction dateArray(date) {\r\n  return [date.getFullYear(), date.getMonth(), date.getDate()]\r\n}\r\n\r\nfunction clearDatePicker() {\r\n  const dates = grid.children\r\n  while (dates.length > 0) {\r\n    dates[0].remove()\r\n  }\r\n}\r\n\r\nfunction insertDateButtons(dates, isCurrentMonth) {\r\n  dates.forEach(date => {\r\n    const dateButton = document.createElement('button')\r\n    dateButton.innerText = date.getDate()\r\n    dateButton.classList.add('date')\r\n    isCurrentMonth || dateButton.classList.add('date-picker-other-month-date')\r\n    formatDateString(date) !== button.innerText ||\r\n      dateButton.classList.add('selected')\r\n    dateButton.dataset.date = dateArray(date)\r\n    grid.append(dateButton)\r\n  })\r\n}\r\n\r\nfunction updateCurrentDays() {\r\n  const daysFromPreviousMonth = getDaysFromPreviousMonth()\r\n  const daysFromCurrentMonth = getDaysFromCurrentMonth()\r\n  const daysFromNextMonth = getDaysFromNextMonth()\r\n  clearDatePicker()\r\n  insertDateButtons(daysFromPreviousMonth, false)\r\n  insertDateButtons(daysFromCurrentMonth, true)\r\n  insertDateButtons(daysFromNextMonth, false)\r\n}\r\n\r\nfunction updateButtonText() {\r\n  button.innerText = formatDateString(selectedDate)\r\n}\r\n\r\nfunction updateDatePicker() {\r\n  updateCurrentMonth()\r\n  updateCurrentDays()\r\n}\r\n\r\nfunction updateDOM() {\r\n  updateButtonText()\r\n  updateDatePicker()\r\n}\r\n"]}